<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Yang's Blog | 杨晨昀]]></title>
  <link href="http://blog.yangchenyun.com/atom.xml" rel="self"/>
  <link href="http://blog.yangchenyun.com/"/>
  <updated>2013-06-09T17:20:47+08:00</updated>
  <id>http://blog.yangchenyun.com/</id>
  <author>
    <name><![CDATA[Steven Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guidelines for Learning Anything from Scratch]]></title>
    <link href="http://blog.yangchenyun.com/2013/05/guidelines-for-learning-anything-from-scratch/"/>
    <updated>2013-05-04T13:55:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2013/05/guidelines-for-learning-anything-from-scratch</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#keep-yourself-motivated-all-the-time-">Keep Yourself Motivated All the Time 时刻保持动力</a>    <ul>
      <li><a href="#realize-the-difficulties-and-set-proper-expectation-">Realize the Difficulties and Set Proper Expectation 意识到学习的困难和设置合理的预期</a></li>
      <li><a href="#seek-motivation-deliberately-">Seek Motivation Deliberately 主动寻找学习的动力</a></li>
      <li><a href="#focus-on-steps-one-at-a-time-">Focus on Steps, One at a Time 每次专注一小步</a></li>
    </ul>
  </li>
  <li><a href="#choose-the-direction-to-make-effort-">Choose the Direction to Make Effort 选择一个努力的方向</a>    <ul>
      <li><a href="#start-from-the-basics-">Start from the Basics 从基础开始</a></li>
      <li><a href="#when-in-doubt-make-instinct-decision-">When in Doubt, Make Instinct Decision 当有疑问的时候，跟随直觉</a></li>
      <li><a href="#follow-the-uncomfortable-zone-">Follow the Uncomfortable Zone 跟随不舒适的感觉</a></li>
    </ul>
  </li>
  <li><a href="#conclusion-">Conclusion 总结</a></li>
</ul>

<p>In late 2010, I began to teach myself programming from scratch. Two years have passed and I have become a <a href="http://github.com/yangchenyun">professional programmer</a>. Along the way, I have also learned some basic web and graphic design.</p>

<p>Self-learning is an exploring experience. Along the way, I’ve learned, tested and applied some principles about learning itself in general. Surprisingly, these principles are often misunderstood or ignored by most people, even by education institutions.</p>

<p>Recently as I’ve started learning guitar, I think this will be a good chance to sort out these principles.</p>

<p>在2010年末的时候，我开始从头自学编程。两年后，编程成了我<a href="http://github.com/yangchenyun">职业的一部分</a>. 在这个过程中，我也自学了网页和平面设计。</p>

<p>这个自学的过程是对自己的一次探索。在这个探索的过程中，我学习，测试和应用了一些学习原则和学习方法。令人惊讶的是，这些学习原则和方法却被大多数的人误解和忽视了，甚至是大部分的教育机构也没有把他们教授给学生。</p>

<p>最近我又开始从头自学吉他，我觉得这是一个好的机会让我可以梳理这些原则和学习方法，并分享给大家。</p>

<h2 id="keep-yourself-motivated-all-the-time-">Keep Yourself Motivated All the Time 时刻保持动力</h2>
<p>Motivation matters. </p>

<p>Continuous effort is required to build skills and it is hard to commit that effort without being motivated <strong>during the whole learning process</strong>. People tend to give up shortly after they decided to start something new, even those who are highly motivated in the first place.</p>

<p>Given any book series, the first volume always outsells later sequences; among curriculum provided by schools, introductory courses are more popular than advanced ones; in gym business, registered members are are much more than regular ones.  People tend to initialize something on a hunch but few will succeed to develop it into a hobby, fewer into a profession. </p>

<p>This phenomena are common because motivation doesn’t arrive naturally, deliberate effort is required to achieve that.</p>

<p>动力是重要的。</p>

<p>掌握一门技能必须经过长期持续的努力，但如果缺少了<strong>持续的动力</strong>非常难在这个过程中坚持下来。人们常常会在决心学一样新的东西不久后懈怠然后放弃，即使是那些在一开始下定决心的人。</p>

<p>看看书店里的系列图书，第一册总是比后面几册卖的要好；那些学校和教育机构提供的课程里，入门的课程总是比高级课程更受欢迎；在健身房里面，注册的会员人数远远多过每天来锻炼的人。人们常常会因为一时的兴起而开始新的学习，但非常少的人能够把他们发展成为兴趣，更少的人能发展成为职业。</p>

<p>这现象那么普遍是非常自然的，因为学习的动力并不是自然而然生成的，我们需要有意识的去激发和维持学习的动力。</p>

<h3 id="realize-the-difficulties-and-set-proper-expectation-">Realize the Difficulties and Set Proper Expectation 意识到学习的困难和设置合理的预期</h3>
<p>When people decide to initialize a learning, they never vision the resulting tedious details, boring exercises and uncomfortable stretches. In fact, it requires hardwork to start learning anything. To learn a foreign language, it is necessary to memorize the basic vocabulary, grammar and pronunciation; to learn a music instrument, scale exercises is required to let the muscle get used to movements on the instrument; to learn programming, basic syntaxes and tedious rules are required to stay sane with computers.</p>

<p>The starting process is especially difficult because it usually takes quite a long period before a beginner realizes the outcome of the effort. It might takes several months to speak or write a paragraphs of sentences in a foreign language, play the first complete song or write first practical program. The beginning phase of learning is like the ‘death valley’ - dry, harsh and seems forever. </p>

<p>Most people don’t expect those difficulties in advance so frustration comes up when the initial expectation mismatches the reality. To avoid this frustration, it is necessary to realize the difficulties in the first places. Make yourself prepared for the difficulties is necessary to guarantee the continuous effort required. </p>

<p>With the proper expectation setup and preparation for coming difficulties, you will get less frustration when encounter them in reality. Then it is time to learn to keep motivated along the way.</p>

<p>当人们决定要开始学习的时候，他们很难预见到学习中那些冗长的细节，无聊的练习和让自己感觉非常不舒适的训练。事实上，任何的学习都需要经过这个困难的过程。如果学习一门外语，背诵基本的词汇，语法和正确的发音就是必须的；如果学习一门乐器，就必须通过音阶的练习形成肌肉记忆；如果学习编程，就必须学习基本的语法规则来和计算机交互。</p>

<p>学习开始的过程是尤其困难的，因为初学者通常要经过相当长的一段时间才能意识到他努力的结果。对于任意一项学习，好几个月以后，初学者才能简单的用外语来书写或者做口语交流，或者学会弹一首非常简单的曲子，或者去写一个简单的实用程序。这最初的阶段像死亡峡谷一样 - 无聊，艰苦还毫无尽头。</p>

<p>大多数的人并不会提前意识到这些困难，所以当他们的预期和现实冲突的时候，沮丧的情绪就可想而知了。为了避免这沮丧的情绪，在最初的时候对这些困难做好心里准备就非常重要。</p>

<p>有了正确的预期和对困难的准备，当在学习的过程中遇到困难的时候就不会特别的沮丧和气馁。然后我们可以说说如何在学习的过程中保持动力。</p>

<h3 id="seek-motivation-deliberately-">Seek Motivation Deliberately 主动寻找学习的动力</h3>
<p>Motivation could be collected from external source. You could deliberately look for materials which inspire you and it doesn’t need to be directly related to the fields you are studying. When I start learning programming from scratch, I collect short inspiring quotes deliberately and turn this collection into a <a href="http://quote.yangchenyun.com">website</a> which I set as default home page for my browser. Those quotes keep me in charged and provide me energy to move forward.</p>

<p>Motivation could be cultivated internally as well. The hunch which drives you to learning is a good place to start. Ask yourself why you want to acquire those skills in the first place. It’s okay the motivation doesn’t sound noble but it must matter to yourself. Once you dig out the motivation, keep reminding yourself of it. You could write them down, paste them on the wall, set them as your screen saver etc.  </p>

<p>你可以从外部去寻找学习的动力。例如你可以主动的搜集那些让你兴奋或者有动力的材料. 当我开始学习编程的时候，我主动搜集了许多箴言来激励我坚持联系，我把这些引言也做成了<a href="http://quote.yangchenyun.com">网站</a>并且设置成为了我浏览器的首页。 这些箴言让我保持学习的动力。</p>

<p>动力也可以从内部挖掘。那最初让你决定学习的冲动通常是很好的开始。问问你自己为什么想掌握这些技能。不必去寻找什么高尚的原因，但它必须和你自己相关。如果你发觉出来了这个动机，常常提醒你自己。例如，你可以把他们写下来，贴在墙上或者设置成自己的桌面壁纸。</p>

<h3 id="focus-on-steps-one-at-a-time-">Focus on Steps, One at a Time 每次专注一小步</h3>
<p>A clear goal helps keep motivation high but locking yourself to that goal is, sometimes, counter-productive.</p>

<p>Saying you have found your motivation - speak Spanish with foreign friends met at hostel, learn basic strokes to draw pictures effortlessly, write programs to build a website etc., if you only keep your eyes on those goals, the necessary exercises and effort become painful and unpleasant things which have to be taken to reach that destination. <strong>The process itself becomes frustrating.</strong></p>

<p>However, if you think on a broader scale, <strong>the destination doesn’t exists</strong>. Even for professionals, there is always space to improve. How would you tell that one writer has reached the “destination” of writing, or one musician has developed all the skills to perform music. For any type of activity, there is an endless journey upfront. Anything is serious enough to commit a life long effort.</p>

<p>Because there is no destination, the painful and unpleasant daily activities <strong>are</strong> the journey. Instead of feeling obliged and restricted about the boring and tedious exercises, you should embrace and enjoy this experience because this is part of the things you are learning.</p>

<p>Then focus on individual steps and pay the attention to however tiny progress made everyday. Pay attention and be proud of how you’ve learned to pronounce a new word, how you could play the scale more faster, how you understand some new syntaxes.</p>

<p>When you focus on the individual steps, you will collect positive feedback along the way, this feedback will generate motivation which later builds up the momentum helpful to move your forward.</p>

<p>有个清晰的目标能够帮助保持动力，但如果只让自己看到那个目标有的时候却有相反的作用。</p>

<p>假设已经找到的自己的目标 - 例如可以和旅行中的朋友说西班牙语，可以把街景画下来，制作自己的个人网站。如果你把注意力都放在目标上，那些每天必须的练习和努力就变得非常的痛苦，它们像是到达彼岸不得不经历的事。<strong>这样学习的过程本身就变得很沮丧了</strong>.</p>

<p>但是，如果你把眼光放的更远一些，那个<strong>设置的目标其实是不存在的</strong>。就算是对达到了职业水准的人而言，他们总是有进步的空间的。我们不能评判说一个作家已经达到了写作的最终目标或者一个音乐家已经完成了所有的音乐技能。对于任何类型的活动，它都有一个永无止境的进步空间。如果你对待他们足够认真的话，任何一件事情都可以用上一辈子的时间来钻研。</p>

<p>因为目标实际上并不存在，那些不愉快和无聊的练习本身就是这个过程的<strong>全部</strong>. 那么我们并不应该对它们在感到拘束和沮丧，而应该享受这个过程，因为它们就是你要学习的技能的必经之路。</p>

<p>你应该专注在每一步，把注意力放在每天都在进行的极小的进步当中。注意那些新学到的东西，哪怕它是新学会的一个发音，新学会的一个音阶或者是新看懂的一个语法。</p>

<p>如果你专注在学习的每一步上，你可以从每天的练习中汲取动力，这样的反馈会让你积累起持续的动力使你不断进步和成长。</p>

<h2 id="choose-the-direction-to-make-effort-">Choose the Direction to Make Effort 选择一个努力的方向</h2>
<p>Once you have learned to keep your motivation high, you are ready to invest your efforts in your studies. </p>

<p>For a beginner in one field, there are a lot of choices needed to be made. These choices certainly contribute to the progress you might make along the way. </p>

<p>当你学会保持动力之后，你就准备好了投入到学习中去了。
对于任何一个领域的初学者来说，那里有无数的选择需要进行。这些选择会影响到学习的进度。</p>

<h3 id="start-from-the-basics-">Start from the Basics 从基础开始</h3>
<p>In any fields, there are several levels of concepts which might be exposed to you. Some are the basics. In learning a language, vocabulary, grammar and spelling are the basic; in programming, syntax, data type, clauses are the basics; in guitar playing, fretting switches, chord chart reading, picking and strumming are the basics.</p>

<p>There are also high level concepts. In learning a language, they include tones, choices of words, idioms; in programming, API design, object orientation, recursion; in guitar playing, musicality, negative spaces.</p>

<p>These two kinds of concepts are usually exposed to a beginner simultaneously, but the higher concepts could not be fully understood without full understanding of the lower ones. It is impossible to write a well-structured articles in one language if the author still struggles with the meaning and spelling of most of the vocabulary, or a programmer to write an application when he is still confused by the syntaxes of the language.</p>

<p>Despite the dependencies, beginners are inclined to learn the high-level concepts instead of low-level ones.  This is reasonable tendency. Learning the basics usually requires plain, tedious, repeated exercises. Memorize vocabulary, do picking exercises, read language specifics. These basics seem to have no relationship with the work carried out by experts. It is easily get bored practicing those basics.  On the other hand, the ambiguity of high-level concepts makes them easily to be understood ‘in general’. This ‘general understanding’ creates an illusion in the beginners to believe they have grasped this concept by being able to talk about this concepts. </p>

<p>The attractiveness of high-level concepts will misguide the beginners to give up practicing the basics and jump to learn the high-level concepts. This will in fact slow down the actual progress they will make.</p>

<p>Slow is fast. For a beginner, it is more important to focus on the basics. Practice those basics until these become natural to the brain or body. Then the high level concepts could be processed and fully understood.</p>

<p>在任何一个领域里，初学者都会接触到很多层次的概念。有些是很基本的，例如在语言里，它们包括词汇，语法和拼写；在程序设计里，它们包括语法，数据结构和程序分句；在吉他里，它们包括音阶，和弦的转化，乐谱的识别以及扫弦的动作等等。</p>

<p>除此之外，也有一些复杂的概念。在语言里，它们包括句子的语调，词句的斟酌和一些俚语的使用；在程序设计里，它们包括程序接口的实现，面向对象的设计和递归；在吉他演奏里，它们包括音乐风格和留白。</p>

<p>初学者常常在同一时间接受这两种概念。但是在初级的概念被完全掌握之前，初学者并不能真正理解那些复杂的概念。一个还挣扎于拼写和单词含义的作者不可能写出一篇构思精巧的文章，一个还挣扎于理解程序的语法的程序员也不能设计出完整的应用程序。</p>

<p>虽然高级的概念依赖于低级的概念，但初学者更倾向于提前学习高级的概念。 这是比较容易理解的偏好。因为低级的概念常常意味着无聊而重复的练习 - 单词记忆，拨片练习，或者阅读语言文档。这些基础似乎和那些专家在进行的工作毫无关联。 这些基础的训练很快就让人不耐烦了。 相反地，那些高级概念因为它们的抽象性，使得它们常常被“在一定意义”上理解了。这种意识往往会让初学者产生错觉，认为当他们可以谈论这些概念的时候就已经理解的了。</p>

<p>因此高级的概念会误导初学者，并让他们忽略初级的训练，而痴心于高级的概念之中。但恰恰相反，这些会使得他们的进展变的更缓慢，甚至止步不前。</p>

<p>慢在这里就是快。对于初学者而言，更应该把重心放在基础之上。练习那些基础的东西直到它们已经成为身体或者大脑的自然反应。 在那个时候，高级的概念才能够被真正的理解。</p>

<h3 id="when-in-doubt-make-instinct-decision-">When in Doubt, Make Instinct Decision 当有疑问的时候，跟随直觉</h3>
<p>Besides the choices between low-level ones and high-level ones, there are still a lot of detailed choices to be made for a beginner. Which dictionary should I purchase when learning Spanish? Which guitar should I play? Acoustic or electric? Which language should I use to start programming? Python, Ruby or C? </p>

<p>The answers is <strong>any one</strong> which you find most accessible and inspiring. These detailed choices don’t matter that much comparing with the effort to move forward. If you master playing the acoustic guitar, it won’t be hard to switch to an electric one; if you master Ruby, it only takes days to work with Python.</p>

<p>And those really important choices will reveal themselves to you later in the future when you are mature enough to distinguish the difference then.</p>

<p>So when you are in doubt, just make one decision and move forward.</p>

<p>除去在低级和高级概念里面的选择之外，初学者还会面对其他很细节的选择。例如我该选择怎么样的字典，我该选择电子还是古典吉他，我该选择学习哪一门编程的语言？Ruby，Python还是C？</p>

<p>答案是<strong>任何一个</strong>你能够接触到并让你感到兴奋的。细节的选择并不那么重要，重要的是能有所行动并不断进步。如果你掌握了如何演奏古典吉他，演奏电子吉他并是难事。如果你掌握了Ruby，通常只需要几天时间就能用Python进行工作了。</p>

<p>那些真正非常重要的选择会在之后再次出现的，在那个时候你一定已经具备了去分辨两种选择的知识了。</p>

<p>所以说，当你对眼前的选择犹豫的时候，就做一个选择，然后持续往前。</p>

<h3 id="follow-the-uncomfortable-zone-">Follow the Uncomfortable Zone 跟随不舒适的感觉</h3>
<p>The starting experience is usually unpleasant. It might be hard to reason out a very simple sentences when studying a foreign language, hard to play the simplest scales, hard to write a small piece of program that doesn’t generate an error.</p>

<p>This hardness usually leads to frustration which will stop beginners making progress. On the contrary, if you think this hardness as a sign of where progress could be made, they are actually very good guidelines about where to put effort on.</p>

<p>If you find some words very hard to understand, you could look up dictionaries to learn more examples about it; if you feel certain scales are hard to play, you could put more exercises on them and let your muscle get used to that; if you constantly make certain type errors in program, you could look up the documentation to get to know more details about them.</p>

<p>You could also focus the short term goals to eliminate those hardness. With continuous effort, you will find yourself more comfortable for that particular practice and this generates feeling of accomplishment and help to keep the morale high.</p>

<p>开始学习的经历总是非常不舒服的。比如你可能需要花很多时间来想明白一个非常简单的句子，或者练习一个非常简单的音阶，或者写一段非常简单的代码。</p>

<p>这些困难常常让初学者望而却步。但与之相反，如果我们把困难当作是可以获得进步的信号，它们就成了引导我们努力的指南针了。</p>

<p>如果你发现有些单词非常难理解，你可以打开字典，去学习更多它们的用法；如果你感觉有些音阶很难练习，就应该做跟多的练习让肌肉熟悉那个动作，如果你发现在程序里常常犯某一种错误，就应该去查看文档并了解它们内部更多的细节实现。</p>

<p>你也可以用之前提到过的方法，例如关注短期的进步来减低任务的难度。通过持续的长时间的练习，你会慢慢发现自己适应了它们。这种进步非常容易察觉，所以也会帮助你保持学习的动力。</p>

<h2 id="conclusion-">Conclusion 总结</h2>
<p>These are some of the principles that I have learned when I started learning programming and design. The central is to keep motivation high - that’s what will help you survive the ‘death valley of giving up’. To get through the hard beginning phase, you need to focus on small steps and put efforts on the basics. Do not worry about the choices you make, worry about the actions you are not about to take. You should live with the stretches and let the uncomfortable stretches guide you through the journey of learning.</p>

<p>以上是我初学设计和编程的过程中总结的一些学习原则。它们的核心是保持学习的动力 - 它们将帮助你度过“死亡峡谷”. 为了熬过最初的困难的阶段，你需要专注在每一个小步骤上然后在基础上下功夫。 不要担心你的选择，担心你没有把它们付诸于行动。 你应该要适应那些“拉伸活动”，同时让那些不舒服的感觉引导你进行学习。</p>

<p>Energy Photos, kana, www.flickr.com/photos/whiterose_kana/
Steps, ChrisMcArdle1, http://www.flickr.com/photos/paperguy7286/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Plan to Read the Ruby Standard Library]]></title>
    <link href="http://blog.yangchenyun.com/2013/05/plan-to-read-the-ruby-standard-library/"/>
    <updated>2013-05-03T20:39:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2013/05/plan-to-read-the-ruby-standard-library</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#why-bother-reading-the-source-code">Why Bother Reading the Source Code?</a></li>
  <li><a href="#resources">Resources</a></li>
  <li><a href="#work-of-load">Work of Load</a></li>
  <li><a href="#goals-and-plans">Goals and Plans</a></li>
  <li><a href="#track-of-my-studies">Track of My Studies</a></li>
</ul>

<h2 id="why-bother-reading-the-source-code">Why Bother Reading the Source Code?</h2>
<p>For the past two years, I’ve built the skill to craft software with various frameworks and tools. To move forward, I need to have more control over the system, the language and the libraries I work with. Merely reading the documentation doesn’t fulfil this requirement.</p>

<p>For any craftmanship, learning from the masterpiece is always a good way to improve one’s skills. Writers make improvement by reading other writers’ work, so should us - coders.</p>

<p>Inspired by <a href="http://blog.rubybestpractices.com/posts/gregory/005-code-reading-stdlib.html">this</a> <a href="http://on-ruby.blogspot.jp/2009/05/questions-five-ways-code-reading.html">two</a> articles, I decided to read all the source code of ruby standard libraries in the next four months.</p>

<p>It might be hard to begin with - lots of unknown idioms, unknown concepts and large code bases - but if I survive, I will improve the ability to dive into the source code directly and make sense out of it. This skill will help me become a better programmer in the future.</p>

<h2 id="resources">Resources</h2>

<p>Most of the studies will take place in the <a href="https://github.com/ruby/ruby/tree/ruby_1_9_3"><code>ruby 1.9.3</code></a> source code.  I decided to read 1.9.3 instead of 2.0 because most of my work still runs in 1.9.3 that and it would be living for a while. It would be good I could adapt what I’ve learned into my work quickly.</p>

<p>I decided to leave out some of the <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/StdlibGem">‘default gems’</a> in the ruby trunk as they have either an indenpedent or a large code base and deserve dedicate attention in the future. So are some domain-specific parser or gui libraries such as <code>syck</code>, <code>psych</code>, <code>rexml</code>, <code>rss</code>, <code>tk</code> and <code>tkextlib</code>.</p>

<p>Along the way, <a href="https://github.com/rubyspec/rubyspec"><code>ruby-spec</code></a> and <a href="http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085">Programming Ruby</a> will be the guide book to help me dive in the source code.</p>

<h2 id="work-of-load">Work of Load</h2>
<p>Leaving out the complex libraries or gems, there are <strong>92 libraries</strong> I need to study in. </p>

<p>I calculated the total lines of code I needed to go through…</p>

<pre><code>cloc --not-match-f='^(tk|psych).+' --exclude-dir=psych,rake,rubygems,rdoc,rexml,tk,tkextlib,rss .
</code></pre>

<p>…and get 287 files, 51770 locs, 15160 effective lines of code(loc).</p>

<pre><code>287 text files.
287 unique files.
731 files ignored.

http://cloc.sourceforge.net v 1.56  T=2.0 s (141.5 files/s, 44190.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Ruby                           283           9649          26961          51770
-------------------------------------------------------------------------------
SUM:                           283           9649          26961          51770
-------------------------------------------------------------------------------
</code></pre>

<p>To be more specific, I want to know every files I also listed all the files I needed to go through with:</p>

<pre><code>tree -I 'x86_64-darwin12.3.0|psych*|rake|rubygems|rdoc|rexml|tk*|rss' --prune
</code></pre>

<p>…and it come out with <a href="#track-of-my-studies">this list</a>.</p>

<h2 id="goals-and-plans">Goals and Plans</h2>
<p>I want to finish this study in 120 days, from <code>Fri, 03 May 2013</code> - <code>Sat, 31 Aug 2013</code>.  That means I need to go through around 450 locs every day, might take me 1 to 2 hours to finish this work.</p>

<p>Reading is also about quality and understanding, so for each library I will:</p>

<ul>
  <li>write some example code to use this library</li>
  <li>do researches about unique techniques I found within the source code</li>
</ul>

<p>All learning progress will be recorded here.</p>

<h2 id="track-of-my-studies">Track of My Studies</h2>

<pre><code>[x] ├── English.rb
[x] ├── abbrev.rb
[ ] ├── base64.rb
[ ] ├── benchmark.rb
[x] ├── bigdecimal
[x] │   ├── jacobian.rb
[x] │   ├── ludcmp.rb
[x] │   ├── math.rb
[x] │   ├── newton.rb
[x] │   └── util.rb
[ ] ├── cgi
[ ] │   ├── cookie.rb
[ ] │   ├── core.rb
[ ] │   ├── html.rb
[ ] │   ├── session
[ ] │   │   └── pstore.rb
[ ] │   ├── session.rb
[ ] │   └── util.rb
[ ] ├── cgi.rb
[ ] ├── cmath.rb
[ ] ├── complex.rb
[ ] ├── count
[ ] ├── csv.rb
[ ] ├── date
[ ] │   └── format.rb
[ ] ├── date.rb
[ ] ├── debug.rb
[ ] ├── delegate.rb
[ ] ├── digest
[ ] │   ├── hmac.rb
[ ] │   └── sha2.rb
[ ] ├── digest.rb
[ ] ├── dl
[ ] │   ├── callback.rb
[ ] │   ├── cparser.rb
[ ] │   ├── func.rb
[ ] │   ├── import.rb
[ ] │   ├── pack.rb
[ ] │   ├── stack.rb
[ ] │   ├── struct.rb
[ ] │   ├── types.rb
[ ] │   └── value.rb
[ ] ├── dl.rb
[ ] ├── drb
[ ] │   ├── acl.rb
[ ] │   ├── drb.rb
[ ] │   ├── eq.rb
[ ] │   ├── extserv.rb
[ ] │   ├── extservm.rb
[ ] │   ├── gw.rb
[ ] │   ├── invokemethod.rb
[ ] │   ├── observer.rb
[ ] │   ├── ssl.rb
[ ] │   ├── timeridconv.rb
[ ] │   └── unix.rb
[ ] ├── drb.rb
[ ] ├── e2mmap.rb
[ ] ├── erb.rb
[ ] ├── expect.rb
[ ] ├── fiddle
[ ] │   ├── closure.rb
[ ] │   └── function.rb
[ ] ├── fiddle.rb
[ ] ├── fileutils.rb
[ ] ├── find.rb
[x] ├── forwardable.rb
[ ] ├── getoptlong.rb
[ ] ├── gserver.rb
[ ] ├── io
[ ] │   └── console
[ ] │       └── size.rb
[ ] ├── ipaddr.rb
[ ] ├── irb
[ ] │   ├── cmd
[ ] │   │   ├── chws.rb
[ ] │   │   ├── fork.rb
[ ] │   │   ├── help.rb
[ ] │   │   ├── load.rb
[ ] │   │   ├── nop.rb
[ ] │   │   ├── pushws.rb
[ ] │   │   └── subirb.rb
[ ] │   ├── completion.rb
[ ] │   ├── context.rb
[ ] │   ├── ext
[ ] │   │   ├── change-ws.rb
[ ] │   │   ├── history.rb
[ ] │   │   ├── loader.rb
[ ] │   │   ├── math-mode.rb
[ ] │   │   ├── multi-irb.rb
[ ] │   │   ├── save-history.rb
[ ] │   │   ├── tracer.rb
[ ] │   │   ├── use-loader.rb
[ ] │   │   └── workspaces.rb
[ ] │   ├── extend-command.rb
[ ] │   ├── frame.rb
[ ] │   ├── help.rb
[ ] │   ├── init.rb
[ ] │   ├── input-method.rb
[ ] │   ├── inspector.rb
[ ] │   ├── lc
[ ] │   │   ├── error.rb
[ ] │   │   ├── help-message
[ ] │   │   └── ja
[ ] │   │       ├── encoding_aliases.rb
[ ] │   │       ├── error.rb
[ ] │   │       └── help-message
[ ] │   ├── locale.rb
[ ] │   ├── magic-file.rb
[ ] │   ├── notifier.rb
[ ] │   ├── output-method.rb
[ ] │   ├── ruby-lex.rb
[ ] │   ├── ruby-token.rb
[ ] │   ├── slex.rb
[ ] │   ├── src_encoding.rb
[ ] │   ├── version.rb
[ ] │   ├── workspace.rb
[ ] │   ├── ws-for-case-2.rb
[ ] │   └── xmp.rb
[ ] ├── irb.rb
[ ] ├── json
[ ] │   ├── add
[ ] │   │   ├── complex.rb
[ ] │   │   ├── core.rb
[ ] │   │   └── rational.rb
[ ] │   ├── common.rb
[ ] │   ├── ext.rb
[ ] │   └── version.rb
[ ] ├── json.rb
[ ] ├── kconv.rb
[ ] ├── logger.rb
[ ] ├── mathn.rb
[ ] ├── matrix
[ ] │   ├── eigenvalue_decomposition.rb
[ ] │   └── lup_decomposition.rb
[ ] ├── matrix.rb
[ ] ├── minitest
[ ] │   ├── autorun.rb
[ ] │   ├── benchmark.rb
[ ] │   ├── mock.rb
[ ] │   ├── pride.rb
[ ] │   ├── spec.rb
[ ] │   └── unit.rb
[ ] ├── mkmf.rb
[ ] ├── monitor.rb
[ ] ├── multi-tk.rb
[ ] ├── mutex_m.rb
[ ] ├── net
[ ] │   ├── ftp.rb
[ ] │   ├── http.rb
[ ] │   ├── https.rb
[ ] │   ├── imap.rb
[ ] │   ├── pop.rb
[ ] │   ├── protocol.rb
[ ] │   ├── smtp.rb
[ ] │   └── telnet.rb
[ ] ├── observer.rb
[ ] ├── open-uri.rb
[ ] ├── open3.rb
[ ] ├── openssl
[ ] │   ├── bn.rb
[ ] │   ├── buffering.rb
[ ] │   ├── cipher.rb
[ ] │   ├── config.rb
[ ] │   ├── digest.rb
[ ] │   ├── ssl-internal.rb
[ ] │   ├── ssl.rb
[ ] │   ├── x509-internal.rb
[ ] │   └── x509.rb
[ ] ├── openssl.rb
[ ] ├── optparse
[ ] │   ├── date.rb
[ ] │   ├── shellwords.rb
[ ] │   ├── time.rb
[ ] │   ├── uri.rb
[ ] │   └── version.rb
[ ] ├── optparse.rb
[ ] ├── ostruct.rb
[ ] ├── pathname.rb
[ ] ├── pp.rb
[ ] ├── prettyprint.rb
[ ] ├── prime.rb
[ ] ├── profile.rb
[ ] ├── profiler.rb
[x] ├── pstore.rb
[ ] ├── racc
[ ] │   └── parser.rb
[ ] ├── rake.rb
[ ] ├── rational.rb
[ ] ├── rbconfig
[ ] │   ├── datadir.rb
[ ] │   └── obsolete.rb
[ ] ├── rdoc.rb
[ ] ├── remote-tk.rb
[ ] ├── resolv-replace.rb
[ ] ├── resolv.rb
[ ] ├── rinda
[ ] │   ├── rinda.rb
[ ] │   ├── ring.rb
[ ] │   └── tuplespace.rb
[ ] ├── ripper
[ ] │   ├── core.rb
[ ] │   ├── filter.rb
[ ] │   ├── lexer.rb
[ ] │   └── sexp.rb
[ ] ├── ripper.rb
[ ] ├── rss.rb
[ ] ├── rubygems.rb
[ ] ├── scanf.rb
[ ] ├── securerandom.rb
[ ] ├── set.rb
[ ] ├── shell
[ ] │   ├── builtin-command.rb
[ ] │   ├── command-processor.rb
[ ] │   ├── error.rb
[ ] │   ├── filter.rb
[ ] │   ├── process-controller.rb
[ ] │   ├── system-command.rb
[ ] │   └── version.rb
[ ] ├── shell.rb
[ ] ├── shellwords.rb
[ ] ├── singleton.rb
[ ] ├── socket.rb
[ ] ├── sync.rb
[ ] ├── tags
[ ] ├── tcltk.rb
[ ] ├── tempfile.rb
[ ] ├── test
[ ] │   ├── unit
[ ] │   │   ├── assertions.rb
[ ] │   │   ├── parallel.rb
[ ] │   │   └── testcase.rb
[ ] │   └── unit.rb
[ ] ├── thread.rb
[ ] ├── thwait.rb
[ ] ├── time.rb
[ ] ├── timeout.rb
[ ] ├── tmpdir.rb
[ ] ├── tracer.rb
[ ] ├── tsort.rb
[ ] ├── ubygems.rb
[ ] ├── un.rb
[ ] ├── uri
[ ] │   ├── common.rb
[ ] │   ├── ftp.rb
[ ] │   ├── generic.rb
[ ] │   ├── http.rb
[ ] │   ├── https.rb
[ ] │   ├── ldap.rb
[ ] │   ├── ldaps.rb
[ ] │   └── mailto.rb
[ ] ├── uri.rb
[ ] ├── weakref.rb
[ ] ├── webrick
[ ] │   ├── accesslog.rb
[ ] │   ├── cgi.rb
[ ] │   ├── compat.rb
[ ] │   ├── config.rb
[ ] │   ├── cookie.rb
[ ] │   ├── htmlutils.rb
[ ] │   ├── httpauth
[ ] │   │   ├── authenticator.rb
[ ] │   │   ├── basicauth.rb
[ ] │   │   ├── digestauth.rb
[ ] │   │   ├── htdigest.rb
[ ] │   │   ├── htgroup.rb
[ ] │   │   ├── htpasswd.rb
[ ] │   │   └── userdb.rb
[ ] │   ├── httpauth.rb
[ ] │   ├── httpproxy.rb
[ ] │   ├── httprequest.rb
[ ] │   ├── httpresponse.rb
[ ] │   ├── https.rb
[ ] │   ├── httpserver.rb
[ ] │   ├── httpservlet
[ ] │   │   ├── abstract.rb
[ ] │   │   ├── cgi_runner.rb
[ ] │   │   ├── cgihandler.rb
[ ] │   │   ├── erbhandler.rb
[ ] │   │   ├── filehandler.rb
[ ] │   │   └── prochandler.rb
[ ] │   ├── httpservlet.rb
[ ] │   ├── httpstatus.rb
[ ] │   ├── httputils.rb
[ ] │   ├── httpversion.rb
[ ] │   ├── log.rb
[ ] │   ├── server.rb
[ ] │   ├── ssl.rb
[ ] │   ├── utils.rb
[ ] │   └── version.rb
[ ] ├── webrick.rb
[ ] ├── xmlrpc
[ ] │   ├── base64.rb
[ ] │   ├── client.rb
[ ] │   ├── config.rb
[ ] │   ├── create.rb
[ ] │   ├── datetime.rb
[ ] │   ├── httpserver.rb
[ ] │   ├── marshal.rb
[ ] │   ├── parser.rb
[ ] │   ├── server.rb
[ ] │   └── utils.rb
[ ] ├── yaml
[ ] │   ├── dbm.rb
[ ] │   └── store.rb
[x] └── yaml.rb
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Finished the DBClass from Stanford with Full Score]]></title>
    <link href="http://blog.yangchenyun.com/2013/03/how-i-finished-the-dbclass-from-stanford-with-full-score/"/>
    <updated>2013-03-24T20:44:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2013/03/how-i-finished-the-dbclass-from-stanford-with-full-score</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#the-summary-of-material">The Summary of Material</a></li>
  <li><a href="#how-i-approach-the-course-differently">How I Approach the Course Differently</a>    <ul>
      <li><a href="#more-reading-and-practice">More Reading and Practice</a></li>
      <li><a href="#tune-the-tools">Tune the Tools</a></li>
    </ul>
  </li>
  <li><a href="#whats-next">What’s next?</a></li>
</ul>

<p>For the past ten weeks, I’ve been working the <a href="https://class2go.stanford.edu/db/Winter2013">DBClass</a> offered by Standord. With 40 hours’ study I achieved <a href="http://blog.yangchenyun.com/assets/download/db-statement.pdf">distinguished statement with full score</a> on all exercises and both exams. </p>

<p>In this course, I’ve acquired a solid knowledge about the algebra used behind the SQL language, learned advanced usage of database system and also get to know the basics to work with XML.</p>

<h2 id="the-summary-of-material">The Summary of Material</h2>

<p>You might checkout <a href="https://github.com/yangchenyun/dbclass-exercises">all the exercise code</a> I’ve written for the course and some mindmaps I summarized for the reviews: <a href="http://blog.yangchenyun.com/images/assertions-triggers.png">assertions and triggers</a>, <a href="http://blog.yangchenyun.com/images/constrains.png">constrains</a>, <a href="http://blog.yangchenyun.com/images/transactions.png">transactions</a>, <a href="http://blog.yangchenyun.com/images/xml-query.png">XML</a>.</p>

<p>Besides following the class instruction, I added some materials for learning and set up a more convenient development environment. The great learning experience is certainly brought by these improvements which I would like to share.</p>

<h2 id="how-i-approach-the-course-differently">How I Approach the Course Differently</h2>
<p>I have approached the course differently in three aspects:</p>

<ul>
  <li>I read all related chapters in text book.</li>
  <li>I studied and wrote real-world examples.</li>
  <li>I made deliberate effort to setup development environment to ease practice and test.</li>
</ul>

<h3 id="more-reading-and-practice">More Reading and Practice</h3>
<p>I followed the text book <a href="http://www.amazon.com/Database-Systems-Complete-Edition-ebook/dp/B004XJIVIC/ref=sr_1_2">The Database System - The Complete Book</a> along the course schedule. This is the text book used in former Stanford database courses and it is what the course’s material origined. I read related chapters in the text book after watching the videos. Reading would reveal some points I’ve missed in the video and help build up a systemetic view over the topic.</p>

<p>As I work as a programmer, I applied the knowledge I learned in this course directly to several relational database based projects. </p>

<p>I wrote a lot of <a href="https://gist.github.com/yangchenyun/5254141">raw SQLs</a> to fetch analytic data against our production database, it helped me to understand subqueries, natural joins and aggregations in the real world.  </p>

<p>I substituted the backend with <code>sqlite</code> for <a href="https://github.com/yangchenyun/ask/compare/cf510240b0f6f1b52d69426c4ba38227c0de2efc...master">one command line tool</a> I was building at local hackthon.</p>

<p>To understand the advanced usage of triggers and constrains, I also read the source code of <a href="https://github.com/SquareSquash/web/blob/master/db/migrate/1_initial_schema.rb">squash</a>, an open source tool we use internally for bug tracking.</p>

<h3 id="tune-the-tools">Tune the Tools</h3>

<p>Another improvment I made is the development environment. I wanted to make it as easy and quick as possible to test out codes. This is the principal rule I’ve learned from former programming experience. Thus I made some deliberate effort to tune up the development environment.</p>

<p>As my major editor is <code>vim</code>, I use the database plugin <a href="http://www.vim.org/scripts/script.php?script_id=356"><code>dbext</code></a> to play with SQL. <code>dbext</code> enables me to execute SQLs and get the result back in my editor. Instead of editing the SQL, doing copy-and-paste, printing the result out, I could write, run, edit, run, cleanup, run with one simple key binding. This convenience was very helpful when solving complex problems. I could start with some instinct ideas and tested them out right away and improved based on the result I got back. This fast cycle of feedback s helped to evolve one idea to one correct solution.</p>

<p><img src="http://blog.yangchenyun.com/images/dbext-img.png" alt="dbext image" /></p>

<p>Later, when I was working with XQuery, I missed the convenience I got from <code>dbext</code>. So I decided to implement it myself. Together with some <a href="https://github.com/yangchenyun/dbclass-exercises/tree/master/utils/bin">bash script</a> and a <a href="https://github.com/yangchenyun/dbclass-exercises/blob/master/utils/xquery-helper.vim">vim function</a>, I built the same experience for XQuery editing. One key binding would fire the XQuery expression against the xml file and return the result right in the editor.</p>

<p><img src="http://blog.yangchenyun.com/images/xquery-img.png" alt="xquery image" /></p>

<p>There is also simple <a href="https://github.com/yangchenyun/dbclass-exercises/tree/master/utils/bin">bash script</a> to make working with relational algebra compiler <code>ra</code> and xslt compiler easier.</p>

<h2 id="whats-next">What’s next?</h2>
<p>The <a href="https://class2go.stanford.edu/db/Winter2013/pages/extra-problems">extra problems</a> included in the DBClass is well designed and is aimed to test more practical skills. I will finish them within this week.</p>

<p>DBclass has covered a wide range of topics in such a short period, but it also omits some concepts such as schemes, procedures, functions which are also widely used in modern databases. I will refer to the book and database system documentations to fill the gap.</p>

<p>Thanks for all the class2go team and Professor Jennifer Widom to carry out such an excellent course.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annual Review for 2012]]></title>
    <link href="http://blog.yangchenyun.com/2013/01/annual-review-2012/"/>
    <updated>2013-01-03T22:12:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2013/01/annual-review-2012</id>
    <content type="html"><![CDATA[<p><img src="http://blog.yangchenyun.com/images/looking_back_2012.jpg" alt="img for 2012 review" class="center" /> <sup id="fnref:4"><a href="#fn:4" rel="footnote">1</a></sup></p>

<ul id="markdown-toc">
  <li><a href="#highlights">Highlights</a></li>
  <li><a href="#achievement-in-hacking">Achievement in Hacking</a>    <ul>
      <li><a href="#system-administration">System Administration</a></li>
      <li><a href="#programming-and-web-development">Programming and Web Development</a></li>
    </ul>
  </li>
  <li><a href="#main-failure">Main Failure</a>    <ul>
      <li><a href="#communication-failure-with-scentlibrary">Communication Failure with Scentlibrary</a></li>
      <li><a href="#break-of-personal-reviewing-habit">Break of Personal Reviewing Habit</a></li>
    </ul>
  </li>
  <li><a href="#other-part-of-2012">Other Part of 2012</a>    <ul>
      <li><a href="#physical-training">Physical Training</a></li>
      <li><a href="#design-blog-and-travel">Design, Blog and Travel</a></li>
    </ul>
  </li>
  <li><a href="#summary">Summary</a></li>
  <li><a href="#footnote">Footnote</a></li>
</ul>

<h2 id="highlights">Highlights</h2>
<p>In the very early 2012, I went to Beijing and joined in ScentLibrary (气味图书馆) to help build the tech department. Thanks to this opportunity, I set up the whole network architecture from scratch - from the topology design, routing rules, DNS/DHCP setup, NAT/firewall rules to several supporting services. This experience provided me a solid experience when I started up my own company later this year.</p>

<p>I peaked <a href="http://www.flickr.com/photos/32400097@N08/">Mt.Haba (5396m)</a> in May. It is the first snow mountain in my life. I had been preparing it since the start of this year. The 14-hour continuous ascending was both challenging and exciting.</p>

<p>Late in May, by the invitation of <a href="http://yaokunjie.com">Peter</a>, I went back to Shanghai and initiated the <a href="http://zenhacks.org">endeavor</a> to bring our shared dream to reality. The ideas we are trying out includes <a href="http://manzuoapp.com">this</a>. </p>

<p>In November, we launched <a href="http://hua.li">Huali</a>(花里花店) after one month’s prototyping and preparation. Since then this project has drawn support from a passionate and young team and is being cultivated by us now.</p>

<h2 id="achievement-in-hacking">Achievement in Hacking</h2>
<p>The main achievements in 2012 are mostly in the fields of programming. Comparing with last year, there are progress in three fields :</p>

<ul>
  <li>More programming output. In the 2nd half year, I was more active in writing programs due to the familiarity with programming environment and fluency in programming language.</li>
  <li>Wider range of knowledge about computers. The programs I crafted this year varied a lot, they range from command line tool, web page parser, chat robot, automation script, API wrapper and web applications.</li>
  <li>Wise choice of tools. Last year, I could only follow the choices of the herd by blind but now I could weigh the options I have at hands and choose between them accordingly. </li>
</ul>

<h3 id="system-administration">System Administration</h3>
<p>In 2012, I have completed the following projects related with system administration:</p>

<ul>
  <li>Set up a corporate Ethernet infrastructure in ScentLibrary using a Linux box as gateway, DNS and DHCP server.</li>
  <li>Accomplished the Stanford open course “An Introduction to Computer Networks” with a score of 880/960. <sup id="fnref:1"><a href="#fn:1" rel="footnote">2</a></sup></li>
  <li>Summarized the knowledge about building an environment ready for application deployment with <a href="https://github.com/zenhacks/capistrano-zen"><code>capistrano-zen</code></a> and open-sourced it.</li>
</ul>

<p>As all the endeavors was worked out on Linux, I became more familiar with it. I studied one of the best invention on Unix - the pipeline. I also touched the surface of the book <a href="http://www.amazon.com/Programming-Addison-Wesley-Professional-Computng-Series/dp/0131429019">“The Art of Unix Programming”</a> to know more about the programming styles of Unix.</p>

<p>Among all the tool, <code>git</code> has changed the way I work and study. After learning the internals of <code>git</code> and I integrated it into my daily work flow. <code>git</code> has also become the tool to check the team member’s work, do code reviews and exchange opinions with other people at github.com. At the end of year, I installed an internal git hosting application with <code>gitolite</code> and <code>gitlab</code>, it provides our team more control over the development process.</p>

<p>I also got to know the basis of network infrastructure of the Internet. I dived into this field with no experience, I struggled for a while - reading academic books about computer network, reading manuals for implementations, trying out new tools. Fortunately, with the help of two friends - <a href="http://adieu.me/">Adieu</a> and <a href="http://www.zhihu.com/people/linux">Zhanzhong</a>, I completed the infrastructure at last. Within the process, I learned all the internal workings such as DHCP, NAT, Routing tables the hard way. Then after I finished the <a href="intro-cn-site">Stanford course</a> about computer network, I linked all the knowledge together and formed a basic knowledge about how the Internet works from bottom up. </p>

<h3 id="programming-and-web-development">Programming and Web Development</h3>
<p>Here is the website, web application or programs I wrote in 2012:</p>

<ul>
  <li>Made three static sites: <a href="http://zenhacks.org">zenhacks</a>, <a href="http://manzuoapp.com">manzuo</a>, <a href="http://wazopartners.com/">wazo</a>. All open-sourced. <sup id="fnref:2"><a href="#fn:2" rel="footnote">3</a></sup></li>
  <li>Accomplished the UC Berkley open course “Software Engineering for Software as a Service” with a score of 1975/2126. <sup id="fnref:3"><a href="#fn:3" rel="footnote">4</a></sup></li>
  <li>Crafted a prototype of <a href="http://manzuoapp.com">manzuoapp</a> with <code>nodeJS</code>, <code>MongoDB</code> and <code>Redis</code>.</li>
  <li>Crafted an e-commerce web application for <a href="http://hua.li">huali</a> with <code>Rails</code>.</li>
  <li>Wrote a small tool <a href="https://github.com/yangchenyun/ask">ask</a> one day at a hackthon with my roomate Kuno, it helps you accumulate your knowledge about commandline tools.</li>
  <li>Wrote a simple Ruby wrapper <a href="https://github.com/yangchenyun/foxit">foxit</a> for <a href="http://gitlabhq.com/">gitlab</a> API v2.</li>
  <li>Created a bot to parse the railscasts.com and mirror it privately with <code>express</code>. The source code is <a href="https://github.com/yangchenyun/railscasts-mirror">here</a>.</li>
  <li>I learned and improved the tool I am using for programming and became more effective with them. Checkout my <a href="https://github.com/yangchenyun/.vim"><code>vim</code> config files</a> and <a href="https://github.com/yangchenyun/fish-config"><code>fish</code> config files</a>.</li>
</ul>

<p>Through the working with various web application, I gained an in-depth understanding over HTTP - a communication protocol between two processes across the Internet just as any RPC service. I’ve worked with beautifully designed APIs such as Github’s and also have designed APIs for manzuoapp and built wrapper around exist API. Through the process, I was more aware of the RESTful design principle.</p>

<p>I adapted the ideas in the <a href="http://www.12factor.net/">12 factor app</a> when design the architecture for the Rails application. I broke down the application into difference Unix processes - web apps, background workers and http workers. This separation helps the application to allocate different responsibility to different processes. </p>

<p>Last but not least, I finally adopted <code>Ruby</code> and <code>Rails</code> into production work. I finished reading on <a href="http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085">Programming Ruby</a> and began to use <code>Ruby</code> to write day-to-day scripts. I also used <code>Rails</code> to build hua.li and all other personal stuff. I am happy to survive with these new tools and look for more fluent usage in the coming new year.</p>

<p>Besides the accomplishment in 2012, I had two main failures in 2012.</p>

<h2 id="main-failure">Main Failure</h2>

<h3 id="communication-failure-with-scentlibrary">Communication Failure with Scentlibrary</h3>
<p>The main failure at work is the failed communication with ScentLibrary. I, as the only tech person within the team, didn’t communicate with the board well. This corporation ended nastily. They ended up with a infrastructure without maintenance, I financial lose and extra reallocation cost.</p>

<p>I was quite furious when they cancelled the oral contract without notice and compensation. But when I settled down in Shanghai and talked this issue with some senior friends at TZG, I realized my own responsibility for that failure. I was too self-centered and overconfident when dealing with disagreement and conflicts, I didn’t sit in their seats to make communication happen. The ignorance of their needs make further corporation unreachable. </p>

<h3 id="break-of-personal-reviewing-habit">Break of Personal Reviewing Habit</h3>
<p>Another failure is the break of my planning and reviewing discipline. It resulted in the gap between the goals set in <a href="http://blog.yangchenyun.com/assets/download/2012_plans.pdf">the 2012 plan</a> and the final accomplishment. I sadly found I failed myself in all fields other than programming. The personal management system I established in 2011 helped me stay focused, fight against distraction and concentration on long term goals which really matters. However, after moving to Shanghai, I stopped this discipline and never resumed it. For the second half year I was busy but not focused. In the last two months, when the new company started up, the errands chewed up the time which I should have put into long term goals.  </p>

<p>Now I might look the other part of my 2012.</p>

<h2 id="other-part-of-2012">Other Part of 2012</h2>

<h3 id="physical-training">Physical Training</h3>
<p>Speaking of physical exercise, I kept my weekly schedule the first half year. I ran 10-20km per week and did some push-ups everyday. However, the exercise stopped when I got back to Shanghai. I didn’t do any physical training for the second half year. There might be two reasons for this: </p>

<ol>
  <li>Lack of long-term motivation. I kept the exercise schedule in Beijing because I was preparing for the snow mountain climbing. Once it was achieved, motivation disappeared.</li>
  <li>Lack of community support. I ran with a bunch of friends in Beijing, this support from friends helped to keep motivation high.</li>
</ol>

<p>As a result, my health declined. My back and shoulder pain became more severe. Once in a while, I would feel the back pain every morning when I got up. My sleeping patterns also went worse - I could not sleep before 3/4am and hardly woke up before 10am.</p>

<p>To ease the back pain, I switched to a <a href="http://iamnotaprogrammer.com/Ikea-Standing-desk-for-22-dollars.html">standing desk</a> in October and it helped to ease the pain in shoulder and back. I will continue this practice.</p>

<p>Next year, re-establishing the exercise routine will be the main goal.</p>

<h3 id="design-blog-and-travel">Design, Blog and Travel</h3>
<p>I didn’t make any progress in design in 2012. Scheduled time is all squeezed out by programming activities. I attempted to learn drawing from <a href="http://behance.net/mrcai">this excellent illustrator</a> I met in ScentLibrary, but I left Beijing too quickly to have a chance to draw more than a basic cubic. </p>

<p>I also fell short of the articles I should have written. I ended up with four articles. I also drafted about <code>capistrano</code> internal workings, <code>xmonad</code> setups but didn’t have a chance to polish them up and make them publishable. Less of focus has impaired the deliberate effort which is necessary to cultivate an idea into article.</p>

<p>For the traveling plan, I didn’t get the chance to Southern-Asia and Russia because the unscheduled work changes in the middle of the year. But I did accomplish peaking Mt.Haba. I had been preparing it physically for more than half year and thanks to the mild weather and the help from our guide, I didn’t encounter any fatal setbacks. The 1700km daily ascending was challenging but the views and the final peaking experience was worth all the effort. Check out the photos <a href="http://www.flickr.com/photos/32400097@N08/">here</a>.</p>

<p>The reading routine beyond programming also fell short of planning. But I did encountered some unexpected good books: </p>

<ul>
  <li><a href="http://www.amazon.com/The-Intention-Experiment-Thoughts-Change/dp/0743276965">The Intention Experiment</a> explains power of thought with scientific methods, </li>
  <li><a href="http://www.amazon.com/The-Soul-Firm-William-Pollard/dp/057804028X">The Soul of the Firm</a> demonstrates the values of people in any successful long-lived company.</li>
  <li><a href="http://www.amazon.com/Ten-Faces-Innovation-Strategies-Organization/dp/0385512074/">The Ten Faces of Innovation</a> provides a clue to detect creative people and form a creative team.</li>
</ul>

<p>In the aspect of social activity, I seemed more active comparing with last year due to living locations. I attended several tech gatherings in Shanghai such as HuJS and RubyConf China. I attended Hobby Project Day twice and topped <a href="http://www.primesplus.com/2012/10/17/hobby-project-day-%E2%80%93-10-2012/">both</a> <a href="http://www.primesplus.com/2012/10/29/hobby-project-day-%E2%80%93-11-2012/">times</a>. I also co-hosted <a href="http://wazopartners.com/box.html">Wazo Box</a> and made a speech about Chinese color there.</p>

<h2 id="summary">Summary</h2>
<p>In summary, 2012 was an unbalanced year for me, all my time and effort has been put into hacking and programming (as I really enjoyed it!). But this unbalanced life also hurt: my health condition declined severely, design and art practice had no progress, exploration was halted etc. Balancing programming and other parts of life will be a challenge for me in 2013.  </p>

<h2 id="footnote">Footnote</h2>

<div class="footnotes">
  <ol>
    <li id="fn:4">
      <p>The photo is credited to <a href="http://www.flickr.com/photos/wtlphotos/">wtl</a>.<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>Here is the <a href="http://blog.yangchenyun.com/assets/download/nc-statement.pdf">statement of accomplishment</a> for <a href="http://class.stanford.edu/networking/Fall2012">An Introduction to Computer Networks</a>.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>The source code could be found at <a href="https://github.com/zenhacks/zenhacks-site">zenhacks</a>, <a href="https://github.com/zenhacks/manzuo-site">manzuo</a> and <a href="https://github.com/yangchenyun/wazo-site">wazo</a>.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Here is the <a href="https://www.coursera.org/saas/">statement of accomplishment</a> for <a href="https://www.coursera.org/saas/">Software Engineering for Software as a Service</a>.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Capistrano]]></title>
    <link href="http://blog.yangchenyun.com/2012/11/use-capistrano/"/>
    <updated>2012-11-08T15:18:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/11/use-capistrano</id>
    <content type="html"><![CDATA[<h2 id="goals">Goals</h2>
<p>### Assumptions</p>

<p>When get called it loads <code>deploy.rb</code> in <code>config</code> directory.
It searches up the file tree to find the <code>Capfile</code>.</p>

<h2 id="building-blocks">Building Blocks</h2>
<p>### Variables
Variables are used to:
1. config the capistrano
2. reduce the duplicates strings</p>

<ul>
  <li><code>set</code> is used to to create and assign a variable or a proc</li>
  <li>cap variable has global scope</li>
  <li>variable could be retrieved through <code>fetch</code> or string </li>
  <li><code>fetch</code> or string interpolation is used to retrieve the variable</li>
  <li><code>exist?</code> is used to check existense of variable</li>
  <li>use <code>unset</code> to destroy a variable</li>
  <li>Cap implements an <code>_cset</code> to undestructive assignment.</li>
  <li>
    <p>use <code>set</code> with a block to use lazy-assignment</p>

    <p>set :username, ‘Capistrano Wizard’
  set(:user) do
     Capistrano::CLI.ui.ask “Give me a ssh user: “
  end</p>
  </li>
</ul>

<h3 id="tasks">Tasks</h3>
<p>Task is the foundation of capistrano. 
- Task could be invoked with <code>cap task_name</code>.
- Task associates a block of commands which will be run for roles .
- A <code>desc</code> could be defined as the description of this tasks.
- Task has a name which could be used to invoke the tasks elsewhere.
- Task with the same name as exist task will overwrite it.</p>

<pre><code>desc "Search Remote Application Server Libraries"
task :search_libs, :roles =&gt; :app do
  run "ls -x1 /usr/lib | grep -i xml"
end
</code></pre>

<h3 id="namespace">Namespace</h3>
<p>Namespace is used to group related tasks. 
- It is called with a block of tasks. 
- Tasks with namespace could be invoked with <code>cap namespace:task_name</code>.
- The default and omitted namespace is <code>top</code>.</p>

<pre><code>namespace :backup do

  task :default do
    web
    db
  end

  task :web, :roles =&gt; :web do
    puts "Backing Up Web Server"
  end

  task :db, :roles =&gt; :db do
    puts "Backing Up DB Server"
  end

end
</code></pre>

<h3 id="chains">Chains</h3>
<ul>
  <li>Task could invoke other tasks by refer its name.</li>
  <li>
    <p>Callback is used to chain task or group of tasks together in sequence.</p>

    <p>namespace :deploy do
    task :default do
      update
      restart           # &lt;= v2.5.5
    end
  end</p>

    <p>after(“deploy:symlink”, “notifier:email_the_boss”)</p>
  </li>
</ul>

<h3 id="transactions">Transactions</h3>
<p>Transaction is used to rollback a failed task.
- Use <code>transaction</code> to run group of tasks. They will run in a transactin.
- The rollback task is defined by <code>on_rollback</code> with in a task.</p>

<pre><code>task :symlink do
  on_rollback do
    run &lt;&lt;-EOC 
      rm #{current_path};
      ln -s #{previous_release} #{current_path}
    EOC
  end
  run "rm #{current_path}; ln -s #{release_path} #{current_path}"
end
</code></pre>

<h3 id="execution">Execution</h3>
<p>Use <code>cap</code> from the command line to execute the capistrano tasks you defined.
- tasks in the arguments are invoked in order.</p>

<h2 id="main-configuration">Main Configuration</h2>
<p>Check out [Configuration Variable][]</p>

<h3 id="server-management">Server Management</h3>
<p><code>role</code> is used to associate a server with a particular role.</p>

<ul>
  <li>The server string could contain <code>user@</code> or <code>:port</code>, this has the highest priority.</li>
  <li>Additional attributes could be specified as a Hash. It is used by tasks to filter server to run commands on.</li>
  <li>When pass a block, the evaluation will be delayed to the first time a command run.</li>
</ul>

<p><code>server</code> is used to assign multiple roles to one host.</p>

<h2 id="main-action-api">Main Action API</h2>
<p><code>run</code> is mostly used to execute arbitrary shell commands on all matched servers.</p>

<pre><code>You could embed `#{sudo}` to run command as sudoer.
</code></pre>

<p><code>capture</code> is used to return the <strong>stdout</strong> to the command as a string.</p>

<p><code>stream</code> is used to stream the stdout locally.</p>

<p><code>download</code>, <code>upload</code> and <code>put</code> to transfer files between remotes and local machine.</p>

<p>Use <code>$CAPISTRANO:HOST$</code> variable to distinguish different servers.</p>

<h2 id="references">References</h2>
<p>[capistrano handbook][]</p>

<p><a href="https://github.com/leehambley/capistrano-handbook/blob/master/index.markdown">capistrano handbook</a>
<a href="https://github.com/capistrano/capistrano/wiki/2.x-Significant-Configuration-Variables">Configuration Variable</a>
<a href="https://github.com/capistrano/capistrano/wiki/2.x-DSL-Documentation-Configuration-Module">DSL Configuration</a>
<a href="https://github.com/capistrano/capistrano/wiki/2.x-DSL-Documentation-Action-Module">DSL Action</a></p>

<h2 id="customized-tasks">Customized Tasks</h2>
<p>All installation is management by <code>apt-get</code>.</p>

<p><code>check:revision</code>: compare the HEAD in the local and remove repository, make sure the remote code base is up-to-date.</p>

<p><code>dev_lib:install</code>: install C libraries on which application depends.</p>

<p><code>nginx:install</code>: install the lastest release of nginx.</p>

<p><code>nginx:setup</code>: generate nginx conf for the application using unicorn as web server.</p>

<p><code>nginx:start/stop/restart/reload</code>: commands mapped to <code>sudo service nginx start/stop/restart/reload</code>.</p>

<p><code>nodejs:install</code>: install node and npm from offcial recommended source.</p>

<p><code>rbenv:install</code>: install rbenv, ruby, patches and libraries which ruby depends on.</p>

<p><code>pg:install</code>: install postgresql.</p>

<p><code>pg:create_db</code>: create database from prompt.</p>

<p><code>pg:setup</code>: generate the database.yml and copied to the shared path.</p>

<p><code>pg:symlink</code>: generate symlink in the current path for the database.yml file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understand Unix Standard Streams, Part 1]]></title>
    <link href="http://blog.yangchenyun.com/2012/10/understand-unix-pipeline/"/>
    <updated>2012-10-01T16:54:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/10/understand-unix-pipeline</id>
    <content type="html"><![CDATA[<p>For linux beginners, these commands are powerful but confusing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="code"><pre><code class="bash"><span class="line">tail /var/log/nginx.log &gt; /tmp/recent.log
</span><span class="line">node server.js 2&gt;&amp;1 &gt;/var/log/info.log
</span><span class="line">ls -al | grep <span class="s1">&#39;/.rb&#39;</span> | wc -l
</span><span class="line">tee &gt;<span class="o">(</span>wc -l &gt;&amp;2<span class="o">)</span> &lt; bigfile | gzip &gt; bigfile.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The shared syntaxes such as <code>&lt;</code>, <code>&gt;</code>, <code>&gt;&amp;1</code> or <code>|</code> indicates one of unix’s best features - standard IO streams. Standard IO streams has been introduced since <a href="http://www.youtube.com/watch?v=tc4ROCJYbm0">the early days of unix</a> and has formed a core part in <a href="http://www.faqs.org/docs/artu/ch01s06.html">unix philosophy</a>.</p>

<blockquote>
  <p>… Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.</p>
</blockquote>

<p>The following sections will explain IO streams of unix and their usage with programs. It will answer the following questions:
- what is standard streams and how does it work with programs?
- how to utilize standard streams in programs?
- what is pipeline and how to use it?
- how to make standard streams work with program arguments?</p>

<p>If your are confused about unix streams, hope the following sections will help you understand the above commands; if you are already familiar with it, [references at the end][#references] might help you unleash more power of it.</p>

<ul id="markdown-toc">
  <li><a href="#the-abstract-io-interface-for-program">The Abstract IO Interface for Program</a>    <ul>
      <li><a href="#example-of-program-talks-with-standard-streams">Example of Program Talks with Standard Streams</a></li>
    </ul>
  </li>
  <li><a href="#io-redirections">IO Redirections</a></li>
  <li><a href="#piping">Piping</a></li>
  <li><a href="#pipe-standard-input--output-as-arguments">Pipe Standard Input / Output as arguments</a>    <ul>
      <li><a href="#process-substitution">Process substitution</a></li>
      <li><a href="#xargs"><code>xargs</code></a></li>
    </ul>
  </li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h2 id="the-abstract-io-interface-for-program">The Abstract IO Interface for Program</h2>
<p>Computer programs need to talk with its environment. It needs to communicate with various hardware such as disk drive, disc, screen, keyboard, mouse, speaker, printer etc. </p>

<p>In operating system predates Unix, program has to contain the ‘knowledge’ for specific devices. It need to know the right ways to talk to various devices. To build a program working with three types of different printers, it needs to contain the pieces to translate program instructions to each printer.</p>

<p><img src="" alt="img of program talks to various devices" /></p>

<p>This binding with devices makes program less portable.</p>

<p>To solve this issue, unix invented the <strong>standard IO streams</strong></p>

<p>Standard IO streams abstract the complexity of reading and writing to different devices with <strong>data stream</strong>. Data stream is merely an ordered sequence of data bytes. Any program could read data stream until the end of a file and it could write data stream without declare the size. This generic ways to read and write data enables program to read input from keyboard devices, files and write data to displays, files, printers etc. without knowing anything about these devices.</p>

<p><img src="" alt="img of program talks to standard io" /></p>

<p>There are three kinds of standard IO streams including standard input, standard output and standard error. Standard input is the data going into a program. By default it is expected from keyboard. Standard output is the where program writes its data to and by default it is the terminal. Standard error is another output stream similar to standard output. It is typically used to output error messages or diagnostics.</p>

<p>Standard streams follows the unix’s phisolophy that <a href="http://en.wikipedia.org/wiki/Everything_is_a_file">‘everything is a file’</a>. So from the program’s point of view, these three standard streams have no difference from normal files. As long as a program could read a file, it could read from standard input; as long as it could write a file, it could write the standard output.</p>

<p>The actual actions of ‘writing to standard output’ is determined by unix itself. It could mean printing to terminal, recording a video tape, burning a disc, sending to printer etc. All of these are handled by the kernel of unix. This feature amplifies the composibility and portablity of a program</p>

<p><img src="" alt="img of program talks to standard io" /></p>

<p>In conslusion, standard IO streams provide an unified input and output interfaces for the programs to communicate with various hardware devices without growing complexities. </p>

<h3 id="example-of-program-talks-with-standard-streams">Example of Program Talks with Standard Streams</h3>
<p>With the knowledge about the standard streams, let’s take a look at one program example.</p>

<p>Type <code>cat</code> in the terminal and now the program will read the default standard input - keyboard. Type <code>first line</code> and <code>&lt;Enter&gt;</code>, it prints to string to the default standard output - the terminal.</p>

<pre><code>$ cat
first line
&gt;first line
</code></pre>

<p><img src="" alt="img of command cat" /></p>

<h2 id="io-redirections">IO Redirections</h2>
<p>Sometimes we want to read data other than the keyboard or write data other than standard output. To alter the default stream source or destination is called <strong>IO Redirection</strong>. This could be archieved through <code>&lt;</code> or <code>&gt;</code>. Let’s first try <code>&gt;</code>:</p>

<pre><code>$ ls -al &gt; /tmp/list.txt
</code></pre>

<p>It redirects the standard output to the file <code>/tmp/list.txt</code> instead of print to terminal.</p>

<p><code>&gt;</code> has a sibling <code>&gt;&gt;</code> which will <strong>append</strong> data to file instead of writing it.</p>

<pre><code>$ ls -al &gt;&gt; /tmp/list.txt
</code></pre>

<p>It appends the result to <code>/tmp/list.text</code> which should contain the same results twice. Let’s read this file through stdin now:</p>

<pre><code>$ less &lt; /tmp/list.txt
</code></pre>

<p>It reads standard input from <code>/tmp/list.txt</code> instead of the keyboard.</p>

<p><img src="" alt="img of IO Redirection" /></p>

<p>To redirect standard error use <code>2&gt;</code>:</p>

<pre><code>$ find this-is-not-exist 2&gt; /tmp/error.txt
</code></pre>

<p>The error message is not displayed on the terminal but stored in the <code>/tmp/error.txt</code> file.</p>

<p>The meaning of the <code>2</code> used in the above command is called <strong>file descriptor</strong>, they are used to access file in one system process just as file name. In the cases when a file doesn’t have a name (such as stdin, stdout, pipeline etc.), file descriptor is the usual way to access them. In unix’s convension the file descriptors for standard input, standard output, standard error are 0, 1, and 2, respectively.</p>

<p>With the knowledge about file descriptor the above command means: execute the <code>find this-is-not-exist</code> command and redirect the file indicated by the file descriptor 2 (which is standard standard error) to <code>/tmp/error.txt</code>.</p>

<p><code>&gt;</code> implicitly redirects standard output, the following two commands are the same.</p>

<pre><code>$ ls -al 1&gt; /tmp/list.txt
$ ls -al &gt; /tmp/list.txt
</code></pre>

<p>Besides using file descriptor to declare the redirection source, it could also be used as redirection destination:</p>

<pre><code>ls -al 2&gt;&amp;1 &gt;/tmp/result.txt
</code></pre>

<p>The above command means: 
- execute <code>ls -al</code> 
- redirects file descriptor 2(standard error) to any destination file descriptor 1(standard output) points to 
- redirects standard output to file <code>/tmp/result.txt</code>. </p>

<p>The <code>&amp;</code> used here is to distinguish between file name <code>1</code> and file descriptor <code>1</code>.</p>

<p><img src="" alt="img of file descriptor cat" /></p>

<h2 id="piping">Piping</h2>
<p>Sometimes a program might write out standard output which might later be read by another program as standard input. With the above knowledge it could be written by IO redirections:</p>

<pre><code>ls -al ~ &gt; /tmp/list.tmp
grep '\.sh' &lt; /tmp/list.tmp
rm /tmp/list.tmp
</code></pre>

<p>As it is such a common interface between programs, unix comes with a better method - pipeline to accomplish this tasks. Pipeline sends the standard output of one program to the standard input of another program. With pipeline the above example could be rewritten as <code>ls -al | grep '\.sh'</code>.</p>

<p>With unix pipeline, it is possible to build one large program composed of small pieces to perform complex operations. You could: 
- do a spell check: <code>makewords &lt; sentence | lowercase | sort | unique | mismatch </code> see <a href="http://www.youtube.com/watch?v=tc4ROCJYbm0">7:00 of this video</a></p>

<ul>
  <li>generate shell statistic stacks such as ▅▆▂▃▂▂▂▅▂▂▅▇▂▂▂▃▆▆▆▅▃▂: <code>curl http://earthquake.usgs.gov/earthquakes/catalogs/eqs1day-M1.txt --silent | sed '1d' | cut -d, -f9 | spark</code>. <a href="https://github.com/holman/spark">check out spark</a></li>
  <li>send a summary of a file <code>cat apple.txt | wc | mail -s "The count" nobody@december.com </code> </li>
  <li>…</li>
</ul>

<p>Besides the simplified syntax, pipeline has other 
Another benefit of pipeline is that all the pieces of programs start execution as soon as data stream comes in. In the first example where a temporary file is created as a medium, <code>grep</code> is not executed until <code>ls -al</code> finishes and writes to the <code>/tmp/list.tmp</code>. In this case, if the temporary data is significantly big, <code>grep</code> needs to wait quitea while. However with pipeline, <code>grep</code> is executed once <code>ls -al</code> starts to send data through standard output. </p>

<p>Pipeline takes less space of disk and memory but with faster processing as all the program runs in parellel to process the data stream.</p>

<h2 id="pipe-standard-input--output-as-arguments">Pipe Standard Input / Output as arguments</h2>
<p>### Difference between standard streams and arguments
Sometimes the program returns the same result when read from standard input or execute with an arguments.</p>

<p><code>cat log</code> has the same result as <code>cat &lt; log</code>. But the mechanism is different.
<code>cat file</code> pass the file name <code>log</code> as an argument to <code>cat</code> but <code>cat &lt; log</code> passes the content of the <code>log</code> file as standard input to <code>cat</code>.</p>

<h3 id="process-substitution">Process substitution</h3>

<pre><code>diff &lt;(sort file1) &lt;(sort file2)
</code></pre>

<h3 id="xargs"><code>xargs</code></h3>

<pre><code>ls *.zip | xargs -n 1 -t unzip
</code></pre>

<h2 id="reference">Reference</h2>
<p><a href="http://en.wikipedia.org/wiki/Pipeline_%28Unix%29">Wikipedia Pipepine</a></p>

<p><a href="http://en.wikipedia.org/wiki/Standard_streams">Wikipedia Standard Stream</a></p>

<p><a href="http://en.wikipedia.org/wiki/Process_substitution">Wikipedia Process Substitution</a></p>

<p><a href="http://www.linfo.org/redirection.html">Redirection Definition</a></p>

<p><a href="http://tldp.org/LDP/abs/html/io-redirection.html">I/O Redirection in Advanced Bash-Scripting Guide</a></p>

<hr />

<p>All the icons used in illustration are from The Noun Project.
<a href="http://thenounproject.com/noun/hard-drive/#icon-No537">Hard Drive</a> and <a href="http://thenounproject.com/noun/computer/#icon-No115">Computer</a> is designed by annonymous designers.
<a href="http://thenounproject.com/noun/computer-keyboard/#icon-No1807">Computer Keyboard</a> is designed by <a href="http://thenounproject.com/andrewforrester">Andrew Forrester</a>.
<a href="http://thenounproject.com/noun/mouse/#icon-No890">Mouse</a> is designed by <a href="http://thenounproject.com/cbertoco">Camila Bertoco</a>.
<a href="http://thenounproject.com/noun/floppy-disk/#icon-No2476">Floppy Disk</a> is designed by <a href="http://thenounproject.com/cortiemens">Cor Tiemens</a>.</p>

<p><a href="http://thenounproject.com/noun/building-block/#icon-No5218" target="_blank">Building Block</a> designed by <a href="http://thenounproject.com/Mikhail1986" target="_blank">Michael Rowe</a> from The Noun Project
<a href="http://thenounproject.com/noun/speaker/#icon-No4106" target="_blank">Speaker</a> designed by <a href="http://thenounproject.com/squintongreen" target="_blank">Samuel Q. Green</a> from The Noun Project
<a href="http://thenounproject.com/noun/database/#icon-No4995" target="_blank">Database</a> designed by <a href="http://thenounproject.com/DmitryBaranovskiy" target="_blank">Dmitry Baranovskiy</a> from The Noun Project
<a href="http://thenounproject.com/noun/document/#icon-No4769" target="_blank">Document</a> designed by <a href="http://thenounproject.com/mariavaragilal" target="_blank">Maria Varagilal</a> from The Noun Project
<a href="http://thenounproject.com/noun/printer/#icon-No109" target="_blank">Printer</a>  from The Noun Project
<a href="http://thenounproject.com/noun/printer/#icon-No1235" target="_blank">Printer</a> designed by <a href="http://thenounproject.com/johncaserta" target="_blank">John Caserta</a> from The Noun Project
<a href="http://thenounproject.com/noun/printer/#icon-No3751" target="_blank">Printer</a> designed by <a href="http://thenounproject.com/bitsnbobs" target="_blank">James Fenton</a> from The Noun Project
<a href="http://thenounproject.com/noun/gears/#icon-No1870" target="_blank">Gears</a> designed by <a href="http://thenounproject.com/daria" target="_blank">Dasha Shevyrenkova</a> from The Noun Project
<a href="http://thenounproject.com/noun/arrow/#icon-No2487" target="_blank">Arrow</a> designed by <a href="http://thenounproject.com/cortiemens" target="_blank">Cor Tiemens</a> from The Noun Project</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use xmonad as window manager on mac OS X]]></title>
    <link href="http://blog.yangchenyun.com/2012/09/use-xmonad-as-window-manager-on-mac-os-x/"/>
    <updated>2012-09-18T14:20:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/09/use-xmonad-as-window-manager-on-mac-os-x</id>
    <content type="html"><![CDATA[<h2 id="why-use-xmonad">Why Use Xmonad</h2>

<h2 id="install-on-mac-os-x">Install on Mac OS X</h2>

<h3 id="step-1-build-haskell-env">Step 1 Build Haskell Env</h3>
<p>Install the <code>Haskell</code> environment which <strong>Xmonad</strong> depends on:</p>

<pre><code>brew update
brew install ghc haskell-platform
</code></pre>

<h3 id="step-2-install-xmonad-packages">Step 2 Install xmonad Packages</h3>
<p>It gonna take a while. Once finished we need the package manager in <code>Haskell</code> to install any Haskell packages:</p>

<pre><code>brew install cabal-install
</code></pre>

<p>Now let’s install <strong>Xmonad</strong> and its dependencies:</p>

<pre><code>cabal upgrade
cabal install xmonad
</code></pre>

<p><code>cabal</code> will solve the dependency and once it is installed, we have a working <code>xnomad</code> binary under <code>~/.cabal/bin</code>.</p>

<h3 id="step-3-configure-x11-to-load-xmonad">Step 3 Configure X11 to load xmonad</h3>

<p>Now we need to config <code>X11</code> to load xmonad when it is launched.</p>

<pre><code>mkdir ~/.xinitrc.d
vim vim 90-xmonad.sh

#! /bin/sh
# "chmod +x ~/.xinitrc.d/90-xmonad.sh" to activate
USERWM=$HOME/.cabal/bin/xmonad
</code></pre>

<p>Now you could start <code>X11</code> server with <code>xinit</code> and start the first <a href="http://xmonad.org/tour.html">tour</a> under xnomad.</p>

<p>The <code>X11</code> or <code>XQuarz</code> will be opened, press <code>Command+Alt+A</code> to switch between you desktop and X11 server.</p>

<p>Next let start configuring our xnomad.</p>

<h2 id="configure-xmonad">Configure Xmonad</h2>

<h3 id="dzen2">Dzen2</h3>
<p>Download <a href="https://sites.google.com/site/gotmor/dzen2-latest.tar.gz?attredirects=0">dzen2</a>, it is a tool to manage status bar</p>

<p>Use options 4 in the <code>config.mk</code> file</p>

<pre><code>LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 -lXinerama -lXpm
CFLAGS = -Os ${INCS} -DVERSION=\"${VERSION}\" -DDZEN_XINERAMA -DDZEN_XPM

make install
</code></pre>

<h3 id="install-xmonad-contrib">Install Xmonad-Contrib</h3>
<p><code>xmonad-contrib</code> is used to access 
When I try to <code>cabal install xmonad-contrib</code>, it complains about missing <code>pkg-config xfr</code>. So I directly put the dependency in the installment:</p>

<pre><code>cabal install xmonad-contrib --flags="-use_xft"
</code></pre>

<h2 id="further-readings">Further Readings</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ack - a better way to search in files]]></title>
    <link href="http://blog.yangchenyun.com/2012/09/ack-a-better-way-to-search-in-files/"/>
    <updated>2012-09-02T16:58:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/09/ack-a-better-way-to-search-in-files</id>
    <content type="html"><![CDATA[<p>Recently, <a href="http://betterthangrep.com/">ack</a> became the replacement for <code>grep</code> when I need to spot editing point in my code bases. It wins over <code>grep</code> in terms of:</p>

<ul>
  <li>A better pattern match syntax with <a href="http://perldoc.perl.org/perlre.html">Perl regular expressions</a></li>
  <li>Smarter to limit searches in directories or certain file types</li>
  <li>Much prettier display of result</li>
  <li>Config files to make customization permanent</li>
</ul>

<p>These advantages will be introduced in the the following sections and after reading it I hope you will be comfortable with it.</p>

<p>Let’s start by installing <code>ack</code>:</p>

<p>Mac OS X with homebrew:</p>

<pre><code>brew install ack
</code></pre>

<p>Debian/Ubuntu</p>

<pre><code>sudo apt-get install ack-grep; sudo ln -s $(which ack-grep) /usr/local/bin/ack
</code></pre>

<p>Then <code>git clone https://github.com/twitter/bootstrap</code> to get the directory used in following examples.</p>

<ul id="markdown-toc">
  <li><a href="#search-with-modern-regexp-pattern">Search with Modern Regexp Pattern</a></li>
  <li><a href="#limit-where-the-search-happens">Limit Where the Search Happens</a></li>
  <li><a href="#add-files-to-be-searched">Add Files to be Searched</a></li>
  <li><a href="#make-configuration-sticky">Make Configuration Sticky</a></li>
  <li><a href="#more-magic-and-conclusion">More Magic and Conclusion</a></li>
</ul>

<h2 id="search-with-modern-regexp-pattern">Search with Modern Regexp Pattern</h2>
<p>Let’s start with a simple search <code>ack diff</code>.</p>

<p>It prints out all the files whose lines contain the string <code>'diff'</code> within the current working directory.</p>

<p>In fact <code>'diff'</code> could be any valid Perl Regular Expression include the <a href="http://www.regular-expressions.info/refadv.html">advanced regular expression syntax</a>, if you are familiar with regular expression in Ruby, Python, javaScript or Perl, you will be far more at home with the syntax than GNU Basic Regular Expression.</p>

<p>For example, we could use <code>ack 'diff\(.+\)'</code> to detect a string as a function call such as <code>'diff(o, n)''</code> .</p>

<p>It will be common that we will be more interested in <code>'diff'</code> as a word than a portion of string. In this case, we could use <code>ack '\bdiff\b'</code> but there is a handy option <code>-w</code> which force a pattern to match a complete word. So we could send our search result as <code>ack -w diff</code>.</p>

<p>As in any regular expression flavors, to match character such as <code>$</code> or <code>.</code>, we need to escape them in the pattern as <code>'\$\.proxy'</code>. In this case, <code>ack</code> also comes with a handy way to treat the pattern as string literal. Use <code>ack -Q $.proxy</code> to match text against liternal <code>'$.proxy'</code>. It is useful to match IP addresses in log file such as <code>ack aa.bb.cc.dd access.log -Q</code>.</p>

<h2 id="limit-where-the-search-happens">Limit Where the Search Happens</h2>
<p>You might have already noticed that in the above example, <code>ack</code> automatically search under your current working directory.</p>

<p>In order to alter this behavior, you could specify the file or directory to be searched in.  <code>ack href js/bootstrap-alert.js</code> will only match pattern in the <code>js/bootstrap-alert.js</code> file.  Similarly, if you specify a directory name as <code>ack proxy docs</code>, it will search in the <code>'docs'</code> directory recursively.</p>

<p>To cancel the recursive behavior, pass in <code>-n</code> or <code>--no-recurce</code>. For example <code>ack post docs -n</code> will only match pattern in the <code>'docs'</code> directory but not its subdirectories.</p>

<p>You can also ignore directory with <code>--ignore-dir=name</code> option, <code>ack post --ignore-dir=docs</code> will seek <code>'post'</code> in all directories other than <code>'docs'</code>.</p>

<p>Sometimes the constrain is complicated, then the option <code>-f</code> will be helpful as it will print the files to be searched before performing the search. For example <code>ack --ignore-dir=docs -f</code> will print all the files <code>ack</code> will search in.</p>

<p>Besides reading from arguments for files, <code>ack</code> could also reads from STDIN. This makes <code>ack</code> a nice candidate in unix pipeline. We could chain multiple <code>ack</code> together to zero in on what the text you really care about.  For example <code>ack postError js | ack message</code> <strong>first</strong> find matches for <code>'postError'</code> in all <code>'js'</code> directory and <strong>within the result</strong> it find matches for <code>'message'</code>.</p>

<h2 id="add-files-to-be-searched">Add Files to be Searched</h2>
<p>Try <code>ack background less</code> to search files in the <code>less</code> directory. It doesn’t return the result we are looking for, the <code>.less</code> files are ignored by <code>ack</code>. There must be something wrong with <code>ack</code>, right?</p>

<p>However, this behavior is not an error but is by design by its author Andy Lester:</p>

<blockquote>
  <p>… Most codebases have a lot files in them which aren’t source files, and grep wastes a lot of time searching through all of those as well and returning matches from those files.  </p>
</blockquote>

<blockquote>
  <p>That’s why ack’s behavior of not searching things it doesn’t recognize is one of its greatest strengths: the speed you get from only searching the things that you want to be looking at.</p>
</blockquote>

<p><code>ack</code> is designed to only search in file types it knows. The file types known by <code>ack</code> could be seen with <code>ack --help-types</code>.  Through <code>ack --help-types | ack less</code> we found that, <code>*.less</code> is not known by <code>ack</code> and that’s the reason why they are ignored.</p>

<p>To add more file types we use <code>--type-set</code> and <code>--type-add</code>.  With <code>ack background less --type-set less=.less</code>, we succeeded in searching in the <code>*.less</code> files.  </p>

<p>Sometimes, we don’t care about file type and just want search in all files in the directory, in these cases, we use <code>--all-types</code> or <code>-a</code>. It will search in all files regardless of its type with one exception - the CVS directory such as <code>.git</code> or <code>.svn</code> is excluded. If we want to count them in, use the ultimate <code>--unrestricted</code> or <code>-u</code> options to search <strong>everything</strong> within a directory.</p>

<h2 id="make-configuration-sticky">Make Configuration Sticky</h2>
<p>In most cases, we want to limit our searches to certain types, then it will be tedious to type <code>--type-set</code> or <code>--type-add</code> every time we want to search beyond build-in file types. <code>~/.ackrc</code> comes into play in these case. This is the configuration file which will be loaded by <code>ack</code>. All the options we introduced above could be written to it to make it permanent.</p>

<p>Take my configuration as an example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="code"><pre><code class="bash"><span class="line"><span class="c"># ~/.ackrc ack configuration file</span>
</span><span class="line">
</span><span class="line"><span class="c"># Sort files by default</span>
</span><span class="line">--sort-files
</span><span class="line">
</span><span class="line"><span class="c"># Use smart-case by default</span>
</span><span class="line">--smart-case
</span><span class="line">
</span><span class="line"><span class="c"># Extended File Types</span>
</span><span class="line">--type-add<span class="o">=</span><span class="nv">css</span><span class="o">=</span>.less,.scss,.sass
</span><span class="line">--type-add<span class="o">=</span><span class="nv">ruby</span><span class="o">=</span>.haml
</span><span class="line">--type-set<span class="o">=</span><span class="nv">coffee</span><span class="o">=</span>.coffee
</span><span class="line">--type-set<span class="o">=</span><span class="nv">markdown</span><span class="o">=</span>.md,.markdown
</span><span class="line">--type-set<span class="o">=</span><span class="nv">json</span><span class="o">=</span>.json
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One thing to be noticed, instead of use whitespace in <code>--type-add less=.less</code> use <code>=</code>. Also, line begins with <code>#</code> is ignored.</p>

<p>After adding our own file types, we could use <code>--type less</code> / <code>--less</code> to limit searches in certain file types or <code>--type noless</code> or <code>--noless</code> to exclude them. </p>

<h2 id="more-magic-and-conclusion">More Magic and Conclusion</h2>
<p><code>ack</code> comes a lot options for the format of output, you could use <code>--pager=less -r</code> to use <code>less</code> as pager with color support, or use <code>-C</code> to display the lines above/below the matched line as well. For more information, check out <code>man ack</code>.</p>

<p>This handy tool is smarter and faster than <code>grep</code> and I have been using it heavily in my workflow.  Moreover, the coming <a href="http://stackoverflow.com/questions/9508431/ack-binding-an-actual-file-name-to-a-filetype#answer-9511450">ack2.0</a> is more powerful in terms of file type filtering and multiple config file support.</p>

<p>Hope this introduction makes you comfortable with <code>ack</code>.</p>

<p>Do you know other “improved” substitute for daily unix utility?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use spy, stub and mock in tests]]></title>
    <link href="http://blog.yangchenyun.com/2012/07/unit-test-with-spy-stub-and-mock/"/>
    <updated>2012-07-29T16:51:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/07/unit-test-with-spy-stub-and-mock</id>
    <content type="html"><![CDATA[<p>This article will share some lessons I learned through writing tests at work. It will explain why doing unit-test and shed light on the confusing concepts of <strong>spy</strong>, <strong>stub</strong> and <strong>mock</strong> and how to apply them in order to meet the goal in a unit-test.</p>

<p>The concept itself is explained in general and examples will be written in <code>coffeescript</code> with <code>SinonJS</code>.</p>

<ul id="markdown-toc">
  <li><a href="#what-unit-test">What unit test?</a></li>
  <li><a href="#what-are-thosespys">What are those…spys?</a>    <ul>
      <li><a href="#spy-slient-spy">Spy, Slient Spy</a></li>
      <li><a href="#stubs-they-are-dummy-objects">Stubs, they are dummy objects.</a></li>
      <li><a href="#mocks">Mocks</a></li>
    </ul>
  </li>
  <li><a href="#further-readings">Further Readings</a></li>
</ul>

<h2 id="what-unit-test">What unit test?</h2>
<p>Spy, stub and mock are all created to accomplish the goal of unit test - <em>“to isolate each part of the program and show that the individual parts are correct.”</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Isolation distinguishes unit tests from other test methdology. </p>

<p>For example, in integration testing, one could prepare a collection of HTTP requests with different scenarios and assert the expected HTML/JSON in the HTTP responses. The test takes the application as whole and tests about overall output with certain input. This method closely mimic the end user behavior but it has several disadvantages.</p>

<p>First, when the application grows more complicated, it is costly to cover all the usage scenarios. Because every components in an application contains several alternative paths, when chaining these paths together, the alternatives will be muptipled. </p>

<p>Second, the complexity of the application make it is hard to zero in on exceptions.</p>

<p>For example, you have this calculator under test, it takes more than two arguments and the calculator will invoke one of another four algebra functions according to the first arguments. </p>

<div><script src="https://gist.github.com/3199164.js?file="></script>
<noscript><pre><code>calculator = (method, numbers...) -&gt;
  switch method
    when 'multiple' then multiple(numbers)
    when 'addition' then add(numbers)
    when 'minus' then minus(numbers)
    when 'divide' then divide(numbers)
    else
      throw new Error &quot;method doesn't exist&quot;
multiple = (numbers) -&gt;
  if numbers.length &lt;= 1
    throw new Error 'multiple takes more than one operands'
  else
    numbers.reduce (prev, curr) -&gt;
      prev * curr

addition = (numbers) -&gt;
  if numbers.length &lt;= 1
    throw new Error 'addition takes more than one operands'
  else
    numbers.reduce (prev, curr) -&gt;
      prev + curr

minus = (numbers) -&gt;
  if numbers.length isnt 2
    throw new Error 'minus takes only two operands'
  else
    numbers[0] - numbers[1]

divide = (numbers) -&gt;
  if numbers.length isnt 2
    throw new Error 'divide takes only two operands'
  else
    numbers[0] / numbers[1]</code></pre></noscript></div>

<p>For the first arguments, you have five variations (‘muptiple’, ‘addition’, ‘minus’, ‘divide’ and others), for the second arguments you have three variations(&lt;=1, 2, &gt;2), and in total you get 15 test cases if you use the integration testing approach.</p>

<p>Moreover, there are five possible exceptions might be thrown out of the system.</p>

<p>In contrast, if we take the unit test approach, there are 5 test cases for the <code>calculator</code>, 2 test cases for each individual algebra functions, in total we will have 13 to cover our application. Moreover, each test will throw their own exception which will be easier to detect bugs in the application code.</p>

<p>Unit test helps to reduce the numbers of test cases and detect buggy parts of application. This benefit will be more significant if the application has a more complex architecture and has more input variations. </p>

<p>However, we need to <strong>isolate the behavior</strong> of individual module to adapt unit test in our code. When we invoke <code>calculator()</code> we only care about its behavior, we don’t want to invoke other functions as well. How could we archieve that? </p>

<p>There is where those spy, stub and mock come into play.</p>

<h2 id="what-are-thosespys">What are those…spys?</h2>
<p>spy, stub and mock are all <strong>test doubles</strong>, they are <strong>objects have the same or parts of the original object’ APIs and doesn’t necessary behave the same</strong>. </p>

<h3 id="spy-slient-spy">Spy, Slient Spy</h3>
<p>Test spy is silent, they don’t disturb the running of the application. They just stand in the corner and record everything about the object they are ordered to spy on. They are so careful that they could remember whether the object is invoked or not, how many arguments are passed in and what arguments they are.</p>

<p>Here we use a spy to test the calculator when some invalid methods name are passed in. Notice we don’t interrupt with the execution of the code but assert the behaviors of the <code>calculator</code> function at last.</p>

<div><script src="https://gist.github.com/3199577.js?file="></script>
<noscript><pre><code>describe &quot;calculator&quot;, -&gt;
  it &quot;should throw an error if no method is matched&quot;, -&gt;
    calculatorSpy = sinon.spy sample, 'calculator'
    try
      sample.calculator('non-exist-method', 1, 2)
    catch e
      sinon.assert.threw(calculatorSpy)
</code></pre></noscript></div>

<p>We could do the same for ‘multiple’ method:</p>

<div><script src="https://gist.github.com/3199633.js?file="></script>
<noscript><pre><code>  it &quot;should call the given method when parameter is valid&quot;, -&gt;
    multipleSpy = sinon.spy sample, 'multiple'
    sample.calculator('multiple', 1, 2)
    sinon.assert.calledOnce(multipleSpy)
    sinon.assert.calledWithExactly(multipleSpy, [1, 2])
</code></pre></noscript></div>

<p>This time with the careful work of the spy, we could not only assert the invocation of the <code>multiple</code> method, but also assert the times it is called and the parameters it is passed in.</p>

<p>With a little refactoring, we could test all the five possible paths for the <code>calculator()</code> method based the above two pieces of testings. </p>

<div><script src="https://gist.github.com/3199697.js?file="></script>
<noscript><pre><code>sample = require('../sample')
assert = require('assert')
sinon = require('sinon')

describe &quot;calculator&quot;, -&gt;
  before -&gt;
    @calculator = sinon.spy sample, 'calculator'
    @multiple = sinon.spy sample, 'multiple'
    @addition = sinon.spy sample, 'addition'
    @minus = sinon.spy sample, 'minus'
    @divide = sinon.spy sample, 'divide'

  it &quot;should throw an error if no method is matched&quot;, -&gt;
    try
      sample.calculator('non-exist-method', 1, 2)
    catch e
      sinon.assert.threw(@calculator)

  it &quot;should call the given method when parameter is valid&quot;, -&gt;
    methods = ['multiple', 'addition', 'minus', 'divide']
    for method in methods
      sample.calculator(method, 1, 2)
      sinon.assert.calledOnce(@[method])
      sinon.assert.calledWithExactly(@[method], [1, 2])</code></pre></noscript></div>

<p>We use mocha’s <code>before</code> helper to create spies for all our methods and we share this spies through <code>@</code>(<code>this</code>) across every tests. </p>

<p>The spy is so dictated to its work that we could assert individual method behaviors. But it comes with a caveat, look the following test:</p>

<div><script src="https://gist.github.com/3199904.js?file="></script>
<noscript><pre><code>  it &quot;should call the given method when parameter is valid&quot;, -&gt;
    sample.calculator('minus', 1)
    sinon.assert.calledOnce(@[method])
</code></pre></noscript></div>

<p>the following test fail with an exception <code>Error: minus takes only two operands</code>. This exception is thrown by the <code>minus()</code> method. But we are testing <code>calculator()</code> now, as long as it calls the <code>minus()</code> method correctly, we shouldn’t blame it for exception thrown by other functions. </p>

<p>Thus we need to <strong>isolate <code>calculator()</code> from <code>minus()</code></strong>, that’s what stub and mock is good at.</p>

<h3 id="stubs-they-are-dummy-objects">Stubs, they are dummy objects.</h3>
<p><strong>Stubs are objects with pre-programmed behavior.</strong> Unlike spy, it not only observes the methods but also <strong>alter the output of the method</strong>. In order to isolate the <code>minus()</code> method from the <code>calculator()</code> method, we need to shutdown the <code>minus()</code> method temporarily. </p>

<div><script src="https://gist.github.com/3200012.js?file="></script>
<noscript><pre><code>describe &quot;calculator&quot;, -&gt;
  it &quot;should call the given method when parameter is valid&quot;, -&gt;

    # stub the method instead of just 'spying' it
    minusStub = sinon.stub sample, 'minus'

    methods = ['multiple', 'addition', 'minus', 'divide']
    sample.calculator('minus', 1)
    sinon.assert.calledOnce(minusStub)
    sinon.assert.calledWithExactly(minusStub, [1])

    # restore the minus method
    minusStub.restore()</code></pre></noscript></div>

<p>This tests pass because the actual <code>minus()</code> method is “stubbed” now, and <code>calculator</code> behaves exactly as we expect - call the right method, pass the parameters in an array.</p>

<p>One thing to note for the last line, we need to <strong>restore</strong> this method to its original behavior after test.</p>

<h3 id="mocks">Mocks</h3>
<p>Sometimes, we want more than stubs, we <strong>expect</strong> stubs also have certain behaviors. Add preprogrammed behavior expectation to stubs, we have mocks. Mocks are be viewed as an combination of stubs and assertions. Mocks observe the method behavior as a spy, re-program method behavior as a stub and verify method behavior when it gets called.</p>

<p>Here is our test rewritten with mocks:</p>

<div><script src="https://gist.github.com/3200122.js?file="></script>
<noscript><pre><code>describe &quot;calculator&quot;, -&gt;
  it &quot;should call the given method when parameter is valid&quot;, -&gt;

    # create mocks to verify behaviors
    mock = sinon.mock(sample)
    mock.expects('minus').once().withArgs([1]).returns({})

    methods = ['multiple', 'addition', 'minus', 'divide']
    sample.calculator('minus', 1)

    # verify the behaviors at last
    mock.verify()

    # restore the minus method
    mock.restore()
</code></pre></noscript></div>

<p>With mocks, we also change the structure of our test cases, we move up our assertion to the top of each test cases.</p>

<p>[Some Summary]</p>

<h2 id="further-readings">Further Readings</h2>
<ul>
  <li><a href="http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html">xUnit Patterns</a> has a table summaries the difference between spies, stubs and mocks. </li>
  <li>CJ has written a very detailed <a href="http://www.amazon.com/Test-Driven-JavaScript-Development-Developers-Library/dp/0321683919/ref=sr_1_1?ie=UTF8&amp;qid=1343580825&amp;sr=8-1&amp;keywords=test+driven+javascript">book</a> with step-by-step examples about testing in <code>javascript</code>.</li>
  <li>The <a href="http://cjohansen.no/en/javascript/javascript_test_spies_stubs_and_mocks">Sinon.JS</a> Doc he creates is also documented very well.</li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://en.wikipedia.org/wiki/Unit_tests<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Measure and Monitor Network Performance]]></title>
    <link href="http://blog.yangchenyun.com/2012/02/measure-network-performance/"/>
    <updated>2012-02-17T15:54:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/02/measure-network-performance</id>
    <content type="html"><![CDATA[<p>When a network is set up it is also necessary to measure the real performance. Does the real WAN bandwidth match ISP’s promise? What’s the real bandwidth of the 1Gbit ethernet LAN? When is the busiest hours of the network? How the traffic is distributed across different IPs and hosts?</p>

<p>In this article, I will introduce the usage of three different programs to solve above problems.</p>

<p><code>iperf</code> is a easy tool to calculate the raw bandwidth between two machines. <code>vnstat</code> could track traffic with a low resource cost. For more detailed information about network usage, <code>ntop</code> plays its role well.</p>

<ul id="markdown-toc">
  <li><a href="#measure-the-effective-bandwidth-with-iperf">Measure the Effective Bandwidth with iperf</a>    <ul>
      <li><a href="#installation">Installation</a></li>
      <li><a href="#two-commands-one-test">Two Commands, One Test</a></li>
      <li><a href="#more-options">More Options</a></li>
    </ul>
  </li>
  <li><a href="#monitor-bandwith-usage-with-vnstat">Monitor Bandwith Usage with vnstat</a>    <ul>
      <li><a href="#install-vnstat">Install Vnstat</a></li>
      <li><a href="#setup-scheduled-update">Setup Scheduled Update</a></li>
      <li><a href="#simple-usage">Simple Usage</a></li>
      <li><a href="#detailed-configuration">Detailed Configuration</a></li>
      <li><a href="#dump-the-data-for-scripting">Dump the Data for Scripting</a></li>
    </ul>
  </li>
  <li><a href="#monitor-detailed-network-traffic-with-ntop">Monitor Detailed Network Traffic with ntop</a></li>
</ul>

<h2 id="measure-the-effective-bandwidth-with-iperf">Measure the Effective Bandwidth with iperf</h2>
<p><code>iperf</code> is a program used to perform network throughput tests. It will <strong>move as much data as possible</strong> using available connections established between two computers.</p>

<h3 id="installation">Installation</h3>
<p><img src="http://blog.yangchenyun.com/images/iperf-install.png" alt="Iperf Install" title="install iperf on both machines" /></p>

<p>On Linux, you do:</p>

<pre><code>sudo aptitude install iperf
</code></pre>

<p>On Mac OS X, you could install it with <a href="mxcl.github.com/homebrew/" title="Home Brew - Package Manager on Mac" target="blank">homebrew</a>.</p>

<pre><code>brew install iperf
</code></pre>

<p>On windows, you could download the executables from <a href="http://linhost.info/downloads/apps/iperf.exe" title="Iperf Executables for Windows">linhost.info</a>.</p>

<h3 id="two-commands-one-test">Two Commands, One Test</h3>
<p><img src="http://blog.yangchenyun.com/images/iperf-mode.png" alt="Iperf mode" title="iperf mode image" /></p>

<p>You need to have <strong>at least</strong> one pair of <code>iperf</code> client and server to perform the test.
To run <code>iperf</code> as server:</p>

<pre><code>iperf -s
</code></pre>

<p>To run <code>iperf</code> as client:</p>

<pre><code>iperf -c 192.168.1.87
</code></pre>

<p>This is the result table from client’s terminal:</p>

<pre><code>------------------------------------------------------------
Client connecting to 192.168.1.87, TCP port 5001
TCP window size: 65.0 KByte (default)
------------------------------------------------------------
[  4] local 192.168.1.88 port 56752 connected with 192.168.1.87 port 5001
[ ID] Interval       Transfer     Bandwidth
[  4]  0.0-10.0 sec   128 MBytes   107 Mbits/sec
</code></pre>

<p>By default, <code>iperf</code> will establish TCP connection on 5001 port and transfer as much data as possble in 10 seconds.</p>

<h3 id="more-options">More Options</h3>
<p>The format of bandwidth could be specified by <code>-f</code>, the time to transmit could be specified in <code>-t</code> and the interval to send data could be set with <code>-i</code>.
For example, to report tests with 10 seconds intervals in 50 seconds under the format of MBytes could be written as:</p>

<pre><code>iperf -c 192.168.1.87 -t 50 -i 10 -f M
</code></pre>

<p>The result likes:</p>

<pre><code>------------------------------------------------------------
Client connecting to 192.168.1.87, TCP port 5001
TCP window size: 0.06 MByte (default)
------------------------------------------------------------
[  4] local 192.168.1.88 port 56924 connected with 192.168.1.87 port 5001
[ ID] Interval       Transfer     Bandwidth
[  4]  0.0-10.0 sec   126 MBytes  12.6 MBytes/sec
[  4] 10.0-20.0 sec   133 MBytes  13.3 MBytes/sec
[  4] 20.0-30.0 sec   135 MBytes  13.5 MBytes/sec
[  4] 30.0-40.0 sec   138 MBytes  13.8 MBytes/sec
[  4] 40.0-50.0 sec   135 MBytes  13.5 MBytes/sec
[  4]  0.0-50.0 sec   667 MBytes  13.3 MBytes/sec
</code></pre>

<p>Sometimes it is also necessary to measure two-way transmission. You could use <code>-d</code> to do bidirectional test at the same time or use <code>-r</code> to do each transmission individually.</p>

<p><img src="http://blog.yangchenyun.com/images/iperf-mode-d.png" alt="Iperf mode" title="iperf mode in d image" /></p>

<p><img src="http://blog.yangchenyun.com/images/iperf-mode-r.png" alt="Iperf mode" title="iperf mode in r image" /></p>

<pre><code>iperf -c 192.168.1.87 -d
iperf -c 192.168.1.87 -r
</code></pre>

<p>If you want to use run <code>iperf</code> as a daemon on the server, you could use <code>-D</code></p>

<pre><code>iperf -s -D
</code></pre>

<p>To specify the port through which the client and server communicate use <code>-p</code></p>

<pre><code>iperf -s -p 9393
iperf -c 192.168.1.87 -p 9393
</code></pre>

<p>You could find more practical examples <a href="http://openmaniak.com/iperf.php" title="iperf detailed usage">here</a>.</p>

<h2 id="monitor-bandwith-usage-with-vnstat">Monitor Bandwith Usage with vnstat</h2>

<p><code>vnstat</code> use a <strong>database file to keep a log of network traffic</strong> through certain interfaces. It provide hourly/daily/weekly/monthly traffic information. And as it doesn’t sniffing packets, it is very efficient.</p>

<p>To use <code>vnstat</code> there are two things needed to be done:
1. Install the program;
2. Update the databases regularly.</p>

<h3 id="install-vnstat">Install Vnstat</h3>
<p>Install <code>vnstat</code> with these commands:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Linux</span>
</span><span class="line">sudo aptitude install vnstat
</span><span class="line"><span class="c"># Mac OS</span>
</span><span class="line">brew install vnstat
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="setup-scheduled-update">Setup Scheduled Update</h3>
<p>Now add a scheduled task with <code>crontab -e</code> to update the database every five minutes.</p>

<pre><code># /etc/cron.d/vnstat: crontab entries for the vnstat package
0-55/5 * * * *   root    if [ -x /usr/bin/vnstat ] &amp;&amp; [ `ls /var/lib/vnstat/ | wc -l` -ge 1 ]; then /usr/bin/vnstat -u; fi
</code></pre>

<p>If you run <code>vnstatd</code> daemon instead of <code>vnstat</code>, there is no need to create the crontab as it will read the <a href="#detailed-configuration">configuration file</a> and handle the updates accordingly.</p>

<h3 id="simple-usage">Simple Usage</h3>
<p>Now wait a while for the database to be updated and you could see a traffic summary for one interface through:</p>

<pre><code>vnstat -i eth0

Database updated: Sat Feb 18 16:30:01 2012

   eth0 since 02/17/2012

          rx:  1.75 GiB      tx:  4.45 GiB      total:  6.20 GiB

   monthly
                     rx      |     tx      |    total    |   avg. rate
     ------------------------+-------------+-------------+---------------
       Feb '12      1.75 GiB |    4.45 GiB |    6.20 GiB |   34.04 kbit/s
     ------------------------+-------------+-------------+---------------
     estimated      2.86 GiB |    7.30 GiB |   10.17 GiB |

   daily
                     rx      |     tx      |    total    |   avg. rate
     ------------------------+-------------+-------------+---------------
     yesterday      1.69 GiB |    4.22 GiB |    5.91 GiB |  573.44 kbit/s
         today     60.19 MiB |  242.29 MiB |  302.48 MiB |   41.71 kbit/s
     ------------------------+-------------+-------------+---------------
     estimated        87 MiB |     352 MiB |     439 MiB |
</code></pre>

<p>You could also specify the intervals with <code>--hours</code>, <code>--days</code>, <code>--weeks</code>, <code>--months</code>.</p>

<pre><code>vnstat -i eth0 --days
</code></pre>

<p>There is even a live mode triggered by <code>--live</code> to display current transfer rate.</p>

<pre><code>vnstat -i eth0 -l
</code></pre>

<h3 id="detailed-configuration">Detailed Configuration</h3>
<p><code>vnstat</code> use <code>$HOME/.vnstatrc</code> for user specific configuration and use <code>/etc/vnstat.conf</code> for default configuration.</p>

<p>You could specify the interfaces to use by default, intervals to update data and update the database file etc.</p>

<p>The configuration file is quite self-explained:</p>

<pre><code>sudo vim /etc/vnstat.conf
</code></pre>

<h3 id="dump-the-data-for-scripting">Dump the Data for Scripting</h3>
<p><code>vnstat</code> also provides formated output of the database.</p>

<p>If you want a xml formatted database, use <code>vnstat --xml</code>.</p>

<p>There is also a parseable format with <code>vnstat --dumpdb</code>. The detailed explanation of the output format could be found at <code>man vnstat</code>. You could also use this format for traffic summary with <code>vnstat --oneline</code>.</p>

<p>You could find more about <code>vnstat</code> on <a href="http://humdi.net/vnstat/" title="vnstat official site">its official site</a>.</p>

<h2 id="monitor-detailed-network-traffic-with-ntop">Monitor Detailed Network Traffic with ntop</h2>
<p><code>vnstat</code> measures the overall traffic of interfaces but it fails to keep track of individual communications. For more detailed information, <code>ntop</code> comes into places.</p>

<p><code>ntop</code> is a <strong>traffic probe</strong> and use a <strong>web interface</strong> to display certain information. It could show traffic distribution across protocols, IPs, hosts and more.</p>

<p>You could install <code>ntop</code> with:</p>

<pre><code>sudo aptitude install ntop
</code></pre>

<p>To initial <code>ntop</code> the first time run</p>

<pre><code>sudo ntop
</code></pre>

<p>Now the ntop could be accessed through 3000 port from HTTP request, you could use it through a browser.</p>

<pre><code>open http://127.0.0.1:3000
</code></pre>

<p>Along with the detailed information <code>ntop</code> collects, it uses much more system resources than <code>vnstat</code>.</p>

<p>I am just a beginner of webmaster work, I’d love to hear what’s in your toolbox to measure network performance.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annual Plan 2012 - One Step Further]]></title>
    <link href="http://blog.yangchenyun.com/2012/02/plans-for-2012/"/>
    <updated>2012-02-16T22:51:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/02/plans-for-2012</id>
    <content type="html"><![CDATA[<p><img src="http://blog.yangchenyun.com/images/annual_2012.jpg" alt="img for 2012 plannings" class="center" /></p>

<p>My 2012 annual plan is finally finished after the decision making about moving to Beijing and joining in <a href="http://demetercn.com/shop/index.html" title="ScentLibrary" target="_blank">ScentLibrary</a>.</p>

<h2 id="the-purpose-of-2012">The Purpose of 2012</h2>
<p>From the <a href="http://blog.yangchenyun.com/2011/12/annual-review/" title="2011 Annual Reviews" target="_blank">changes</a> I made in 2011, I will expand my skills to the full-web development stack from LAN setup, web services configuration, backend development and agile development with Rails. Besides, I will start practicing the very basics of design - drawing while dust off my photograph skills. I would also explore new fields such as branding, scents in daily life, innovation and story-telling. On the physical side, I would recover my backbone aches through exercise routines which will also prepare myself for the snow mountain climbing and cycling in countries of southern Asia.</p>

<p>The detailed plan could be downloaded <a href="http://blog.yangchenyun.com/assets/download/2012_plans.pdf" title="2012 Annual Plans" target="_blank">here</a>. And the spreadsheets I used to do this practice is <a href="http://blog.yangchenyun.com/assets/download/toolkit_v2.zip" title="personal management toolkit">here</a>.</p>

<h2 id="outcome-of-2012">Outcome of 2012</h2>
<p>The main goals of accomplishment includes:</p>

<h3 id="internal-development">Internal Development</h3>
<ul>
  <li>More patience about my work.</li>
  <li>Take record of 3000 hours.</li>
  <li>Increase productive hours (pomodoros) to 5.5 hours per day.</li>
</ul>

<h3 id="computer-science">Computer Science</h3>
<ul>
  <li>HTML5/CSS3 powered branding website for ScentLibrary.</li>
  <li>A e-commerce web app based on agile development using Rails.</li>
  <li>Setup web services on Linux (DNS/HTTP/SFTP/VPN etc.)</li>
  <li>Two cutting-edge experiments with HTML5/CSS3/JS.</li>
  <li>Reach a rank of annual top 10% at <a href="http://http://stackoverflow.com/" title="StackOverflow" target="_blank">stackoverflow.com</a></li>
  <li>Contribute to one open-source project.</li>
  <li>Write 20 tutorials about web development.</li>
</ul>

<h3 id="design">Design</h3>
<ul>
  <li>Finish one drawing curriculum.</li>
  <li>Conduct two graphic design projects.</li>
  <li>Make one short video about natural scenes.</li>
</ul>

<h3 id="misc">Misc</h3>
<ul>
  <li>Exercise 285 hours.</li>
  <li>Run 10km in 50’, swim 50m in 60’’ and 500m in 15’.</li>
  <li>Make four public presentations.</li>
  <li>Climbed one snow mountain.</li>
</ul>

<p>Footnote: The photo is credited to <a href="http://www.flickr.com/photos/flevasseur/">frank-k_</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[respect and reward from scentLibrary]]></title>
    <link href="http://blog.yangchenyun.com/2012/01/respect-and-reward-from-scentlibrary/"/>
    <updated>2012-01-31T21:51:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/01/respect-and-reward-from-scentlibrary</id>
    <content type="html"><![CDATA[<p>I was a little annoyed when Cozi turned me down about my request for Herman Miller Chair and talked about my salary request.</p>

<p>I thought I am asking for my reasonable portion - I worked in a role of CTO - setting up servers, writing backend database and tackling frontend design. I need to overwork several hours a day. I will also diffuse my energy across multiple fields and problems and have less time to focus in one area.</p>

<p>The salary - 1.2w / month I asked is only for a good frontend developer. But they still thought it is too high to make it.</p>

<p>I feel discouraged. I only decided to stay in this company for a while, so get fair payment is among first priority. I don’t want to invest my time and energy in this company now.</p>

<p>On the other side, is it an indication that I am not recognized by the community - will a people from Google or Douban be able to request more ?</p>

<p>Am I too self-centered? Should I focus on my work at first - if I am disturbed by these financial concerns, I would lost the power of focus. Try to set yourself free?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to love ordinary people]]></title>
    <link href="http://blog.yangchenyun.com/2012/01/how-to-love-ordinary-people/"/>
    <updated>2012-01-25T20:50:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/01/how-to-love-ordinary-people</id>
    <content type="html"><![CDATA[<p>Evelyn, Nancy:</p>

<p>龙年快乐！</p>

<p>谢谢在北京时候花那么多时间和我聊天，让我意识到对自我的执着和对人的不宽容。翻看自己的长期目标中，我的确对“朋友”有一些标准:</p>

<ul>
  <li>independent, brave to pursuit their own dreams.</li>
  <li>reject conventions and hold an unique understanding of life.</li>
  <li>warm-hearted towards their friends, their family.</li>
  <li>Entrepreneurs not just businessmen.</li>
  <li>People who keep challenging themselves.</li>
</ul>

<p>我所讨厌的并不是平凡(ordinary)，人可以用伟大的方式做平凡的事情。我讨厌的是<strong>平庸（mediocrity）</strong>，我<strong>厌恶人对于安逸的追求和对困难的逃避</strong>（本性的一部分），所以每每看到人以“平庸的方式”呈现在我眼前的时候就生厌恶之心。这种感觉在回春节的这段时间更加强烈。</p>

<p>曾经一起为理想奋斗的好友逐渐习惯大公司内部的官僚体制，开始思考升职，结婚和成家，开始追求一年四五十万的中产生活。曾经影响过自己的朋友因为屡次做事受挫已经丧失了继续闯荡的勇气，决定结婚成家开始平凡的生活。曾经同窗的同学讨论的话题是工资，婚嫁，育子。</p>

<p>我不由自主的会开始疏远他们 - 至少是在心理上。很多话我都放在心里说不出去了。因为当人已经没有向前动力的时候，再多的建议也是徒劳，甚至会伤害这段关系。我开始说一些应付客气的话，扮演我该扮演的角色。</p>

<p>在父母身边也是。父母只希望我能够有一份稳定的工作，在杭州安安分分的过日子。他们所想所虑和我所想所虑大相径庭。</p>

<p>相由心生。<strong>我所厌恶的在“他人”身上的平庸，也是我自己内心的平庸</strong>。是我不愿意接受自己的平庸才不愿意接受别人的平庸。我想变得宽容就必须接受自己的“平庸” - 但这是我无论如何都不想接受的。</p>

<p>在这点上你们应该和我一样。你们也因为不甘心在New Zealand平凡安逸的生活才回来这里创业的。从你们的工作态度和要求也反应了不甘于“平庸” - 你们不满足于年千万的利润，会给各个部门压力，会想做有影响力的企业。 但为什么同时你们会“不加选择”的接受来气味的人，“对来气味的人没有期待”，会爱每一个员工？</p>

<p>又或者我猜想你们身边一定也有“以平庸的方式”生活着的人们，你们又如何去面对这些呢？</p>

<p>晨昀上，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[calm down in spring festival]]></title>
    <link href="http://blog.yangchenyun.com/2012/01/calm-down-in-spring-festival/"/>
    <updated>2012-01-25T20:11:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/01/calm-down-in-spring-festival</id>
    <content type="html"><![CDATA[<p>初三，回家的第五天，浪费的太多时间无所事事 - 家庭聚餐，朋友聚会还有花在网络上百无聊赖的时间。我开始担心这个逐渐变懒的自己 - 从1月15日开始，我再次开始赖床和晚起。我又开始手淫甚至看AV片段。</p>

<p>过去这一年的努力让我在现实有了立足之地，我可以以设计和开发来做一些贡献；我洋洋得意自己的学习能力，我相信几年后我就可以有财务上的自由和名声。虽然不喜欢朋友间关于工资的讨论，但我自己却仍然以此自得。大概我也觉得自己离成功已经很近了吧。</p>

<p>我花很多时候在憧憬上面 - 花了将近整整一个月来憧憬自己的年度计划，憧憬一些好玩的项目，憧憬自己学会了后台技术，憧憬自己带领团队做自己喜欢的事。但每每到了要开始做事的时候 - 要开始读自己还不熟悉的代码，架设自己还不会的服务，看自己还不明白的书，就开始不断的给自己找借口:</p>

<ul>
  <li>我原来想要的生活在变化，我<strong>需要时间</strong>让自己找到自己喜欢的;</li>
  <li>我需要学会Ruby<strong>之后才可以</strong>阅读它的源代码;</li>
  <li>我<strong>现在还不会</strong>架设网站服务;</li>
  <li>气味对我还没有具体的期待,我<strong>可以有时间</strong>来延迟开始工作;</li>
  <li><strong>以后</strong>, 我可以开始学画画, 学摄影;</li>
  <li><strong>我想</strong>游玩北京, 每周出去京郊.</li>
  <li>我需要决定博客的主题之后<strong>再开始</strong>写作.</li>
</ul>

<p>从12月初回家以来,我从没有专注在一件事情上. 我学了一些关于SSH的知识, 学了一些Ruby的知识; 我写了自己的年终小结, 搭建了和设计了自己的个人主页和平台. 我学了一部分Demeter的知识, 我学会架设了FTP服务器. 但是我没有archievement - 整整两个月.</p>

<p>因为<strong>没有计划</strong>, 我丧失了专注带来的驱动力, 我犯了很早之前自己就犯过的错误 - 把时间浪费在各种尝试之中.</p>

<blockquote>
  <p>难以做决定是我性格中的弱点, 我需要计划系统来帮助我坚持一项计划或者指导我做某个决定</p>
</blockquote>

<p>我其实已经回到了一年之前, 沉浸在想象中的成功之中并且给自己不行动寻找借口. 我已经不是那个不断挑战自我的自己了. 我开始沾沾自喜所收获的小成功并且以为<strong>这些是自然而然</strong>的过程. 我开始忘记了自律和行动的重要性.</p>

<p>以此自勉. 在春节后面的五天里, 去完成自己的新年计划.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annual_Review Campaign]]></title>
    <link href="http://blog.yangchenyun.com/2012/01/annual-review-campaign/"/>
    <updated>2012-01-10T22:10:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2012/01/annual-review-campaign</id>
    <content type="html"><![CDATA[<p>A Change Made in 2011</p>

<p>Hey <em>|FNAME|</em>,
         There has been a while since we met last time, how is everything going?</p>

<pre><code>     In 2011, I strayed away from my Economics background and taught myself to be a web designer and developer. I was sort of frightened when starting off. One year later, when looking back, I found I have progressed much further than I expected and gained much more courage to pursuit what I want.

     After learning the fundamentals at home for five/six month, I created the site for TEDxFiveStarSquare and helped the design of this event. Later I got involved in the best start-up company in online dining business and led the UI design and frontend development there.

     I also made several public presentation and built sites including the one feed me motivation to move forward all the time.

     You could find how I go through this change through the extended review of 2011 and the lessons I learned along the way.

     The followings are some highlights in 2011:

     Thanks for your support and suggestion, without that I couldn't progress so far.
</code></pre>

<p>Motivation Crisis</p>

<p>In the first several months, I got overwhelmed by fear and self-doubt. I felt quite depressed and even thought about giving it up. I reasoned out that If the fear couldn’t be overcome, I could go nowhere further than where I was. Thus I created Qottos to feed me motivation. Going through this process without giving up provides me an invaluable experience and confidence to move further. Read More »</p>

<p>TEDxFiveStarSquare</p>

<p>From a technology gathering, I met Peter and later the whole TEDxFiveStarSquare team in coincidence. I created the site and designed the banner, poster and screen for this event. This is my first ‘real world’ project and thanks to the great work of all the teammates, we pull this event off. This experience consolidates my confidence to work in the field of design and development. Read More »</p>

<p>Work at ELEME</p>

<p>In June, I started the NAPOS project with the CTO at ELEME. It is the first interactive software I made. After I finished this work, I joined in the team and contributed to the redesign of ELEME 2011 website and refactoring project. Read More »</p>

<p>A Talk about Changes</p>

<p>On August 21th, 301 days when I started to take this change, I made a presentation at TEDxYouth West Lake. Based on my experience, I talked about the necessity to bear loneliness, taking actions as a strategy and the importance of endurance. Watch online »</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annual Review 2011 - A Turning in Life]]></title>
    <link href="http://blog.yangchenyun.com/2011/12/annual-review/"/>
    <updated>2011-12-31T23:11:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2011/12/annual-review</id>
    <content type="html"><![CDATA[<p>2011 is a turning corner of my life. Straying away from my Economics background, I started learning web design and development from scratch and ended up with a result better than my expectation.</p>

<ul id="markdown-toc">
  <li><a href="#highlights">Highlights</a></li>
  <li><a href="#excerpt-of-2011">Excerpt of 2011</a></li>
  <li><a href="#a-more-close-look-at-2011">A More Close Look at 2011</a>    <ul>
      <li><a href="#english-writing">English Writing</a></li>
      <li><a href="#web-design-and-computer-science">Web Design and Computer Science</a></li>
      <li><a href="#travel">Travel</a></li>
      <li><a href="#physical-training-and-habit">Physical Training and Habit</a>        <ul>
          <li><a href="#personal-management-system">Personal Management System</a></li>
          <li><a href="#physical-training-and-health">Physical Training and Health</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="highlights">Highlights</h2>

<p>On March 14th, I made a <a href="http://ge.tt/3XTYjJg?" title="Presentation about what hinders adult from learning" target="_blank">presentation</a> at Barcamp Shanghai talking about what hinders adult learning and I met Peter and later the whole TEDxFiveStarSquare(TEDxFSS) team.</p>

<p>On May 15th, I created <a href="http://tedxfivestarsquare.com" target="_blank">the site of TEDxFSS</a> and designed the banner, poster and screen for this event. This solidates my confidence to deliver work of design and development.</p>

<p>On June 7th, I started the <a href="http://ele.me/napos.php" title="Link to Eleme Napos" target="_blank">Napos</a> project at <a href="http://ele.me/at/entry/1" target="_blank">Eleme</a> and later I joined the team and took charge of UI design and frontend development.</p>

<p>On August 21th, I made a <a href="http://blog.yangchenyun.com/2011/08/tedxyouth-wesklake-speech/" target="_blank">speech</a> at TEDxYouth Westlake about making a change in your life.</p>

<h2 id="excerpt-of-2011">Excerpt of 2011</h2>

<p><img src="http://blog.yangchenyun.com/images/tedxfss_logo.png" alt="TEDxFiveStarSquare Logo" class="left" />
  I expected one year preparation before I could deliver qualified projects. But the first website was accomplished after five months of learning. I built <a href="http://tedxfivestarsquare.com" target="_blank">the website of TEDxFSS</a> and later contributed to the design of the whole event. With the help of a great team, we pull off the only one <a href="http://www.sxn.me/gallery/#/Gallery/TEDx%20FiveStarSquare%202011%20-%20May%2015%202011" title="TEDxFSS Event" target="_blank">TEDx Event</a> this year in Shanghai.</p>

<p>After that, I joined in a start-up company and created a <a href="http://ele.me/napos.php" title="Link to Eleme Napos" target="_blank">webapp</a> for restaurants and contributed to the <a href="http://ele.me/at/entry/1" target="_blank">new website</a> redesign and later led the frontend development.</p>

<p>Thanks to the people I worked with, I also have fallen in love with Unix and learned to setup various backend service. A summary on technology learned will cover this geeky issue.</p>

<p>The progress is mostly due to the <a href="http://blog.yangchenyun.com/2011/12/annual-review/#personal-management-system" title="section of personal management system">personal management system</a> I have developed to manage my times and goals. In 2011, I <strong>recorded 7.58 hours</strong> and worked with focus for <strong>4.18 hours everyday</strong>.</p>

<p>However in other aspects, things haven’t worked out as expected. Due to my work in the second half year, English learning have been paused and travel plan to Southern Asia was canceled. Besides I have been suffering from anxieties from time to time and getting up early still eludes me.</p>

<p>From the ups and downs of 2011, I learned a lot <a href="http://blog.yangchenyun.com/2011/12/lesson-learned/" title="Lesson I have learned" target="_blank">lessons</a> and I am thinking about moving forward.</p>

<h2 id="a-more-close-look-at-2011">A More Close Look at 2011</h2>

<h3 id="english-writing">English Writing</h3>
<p>The biggest achievement for English study is that I have developed a memorizing system with <a href="http://www.supermemo.com/english/princip.htm" title="Supermemo methods" target="_blank">Supermemo</a> methodology for learning. I collected sentences and words from my reading and quoted the detailed explanation in that context from dictionaries. Later this collection was transformed into Supermemo items (with the format of xml) through a script. The Supermemo software then took care of the repetition plans.</p>

<p>Through out the year, I have remembered <strong>2151</strong> sentences, <strong>1412</strong> Nouns, <strong>441</strong> oral phrases and <strong>2477</strong> words spelling.</p>

<p>The repetition plans are calculated according to the supermemo algorithm which makes sure I will remember what I have learned. The learning effort becomes accumulative.</p>

<p>Although working out well, the performance still fell short of the goals as I had paused learning new words in the 2nd half year due to my work. A initial habit breaking in June finally led to a permanent stop. In November, I had more than 3000 drills need to be caught up with.</p>

<p>For the same reason, I also missed the goals for English reading and writing.</p>

<p>I planned to write 15 publishable articles (20,000 words) but I only ended up in only <a href="http://ge.tt/3XTYjJg?" title="Presentation about what hinders adult from learning" target="_blank">one</a> and some drafts. I also missed the goal to finish 10 non-tech English books. There were about ten books I have opened this year but I didn’t finish all of them.</p>

<ul>
  <li>Hermann Hesse - Siddhartha, listened several times with audio version.</li>
  <li>Rilke - Letters To A Young Poet, read through once.</li>
  <li>Ernest Hemingway - The Old Man and the Sea, read through several times and recited the first 20% of the book.</li>
  <li>Carson McCullers - The Heart is a Lonely Hunter, finished Part one</li>
  <li>Malcolm Gladwell - Outliers -The Story Of Success, listened the audiobook.</li>
  <li>Malcolm Gladwell - Blink, listened with the audiobook.</li>
  <li>Mihaly Csikszentmihalyi - Flow, read through once</li>
  <li>Anne Lamott - Bird by Bird, read 50% of all chapters</li>
</ul>

<p>The biggest achievement is that I have accustomized myself to reading electronic books. I built myself an search-able library and I also customize the <a href="http://www.tracker-software.com/product/pdf-xchange-viewer" title="PDF-XChange Viewer" target="_blank">great PDF reader</a> with an highlight system to mark while reading. With the notes and comments, I could archive the same reading experience as reading a paper book while gain the ability to search with convenience.</p>

<h3 id="web-design-and-computer-science">Web Design and Computer Science</h3>
<p>I wanted myself to be a “qualified web designer” in the beginning of the year and thanks to my full-time work in the second half year I have exceeded this goal by all means.</p>

<p>I have acquired all the core skills I planned to master - <code>HTML5</code>, <code>CSS</code>, <code>javaScript</code> and created five sites. Besides, I also have switched my workspace to Unix (MacOS and Ubuntu), learned to setup servers (HTTP, SSH etc.), learned basic <code>Ruby</code> scripting and also contributed <a href="http://stackoverflow.com/users/966437/steven-yang" title="Stackoverflow Profile" target="_blank">a little back to the community</a>.</p>

<p>Beyond the details of various technology, I began to form a big picture about the whole “web stack” - how a browser renders to a user based on HTTP response processed by the server. This guide map now provides me a clear clue about what I need to learn in the future.</p>

<p>The part that fell short is the financial income. I began to get incomes in June but I didn’t reach my goals for saving. The reason is that I compromised my salary for expected options. As I left the team, those promise won’t be cashed in. I was also quite inactive on the business side. I didn’t make any effort to negotiate my incomes or look for contract projects.</p>

<h3 id="travel">Travel</h3>
<p>Although I have processed material and booked three tickets to Malaysia, Indonesia and Thailand, I canceled the itinerary because of work in the second half year.</p>

<p>I set travel the highest priority in the planning, but along the time, I found becoming a good developer and designer motivates me much more than travel. Near the end of year <a href="http://www.tudou.com/programs/view/tr48fLU-dNA/" title="Nancy's Speech" target="_blank">Nancy from ScentLibrary</a> also asked me “Why are you travel?”. It makes me powder my motivation underneath - exploration is just a process not a goal, so what is my ultimate goal of living?</p>

<p>This stunning question provides a clue I need to follow.</p>

<h3 id="physical-training-and-habit">Physical Training and Habit</h3>

<h4 id="personal-management-system">Personal Management System</h4>
<p>The corner stone for all my growth is the time management system I invented by combining the methods of GTD, <a href="http://en.wikipedia.org/wiki/Pomodoro_Technique" title="Pomodoro Methods" target="_blank">Pomodoro</a> and <a href="http://book.douban.com/subject/1115353/" title="Lyubishchev's Methods" target="_blank">Lyubishchev</a>. I used GTD method to setup top-down goals and break them down to single tasks. Everyday I cleared my task stack one by one. At last, I recorded and audited my time spending to detect spaces for improvement. I edited the sheet created by <a href="chrisguillebeau.com/3x5/" title="aonc site" target="_blank">Chris@ANOC</a> and I invented my own sheet for weekly and daily planning. You could find the whole toolkit <a href="http://blog.yangchenyun.com/assets/download/toolkit_v2.zip" title="personal management toolkit" target="_blank">here</a>.</p>

<p>I also did some improvement to this system while I am using it:</p>

<ul>
  <li>I add the feature-week and feature-day to ramp up energy for starting some new projects;</li>
  <li>I separates the hours of working and learning;</li>
  <li>I wrote down everyday tasks in the beginning of the week;</li>
  <li>I would use several pomodoros in a row to handle big tasks;</li>
  <li>I also record normal time spendings.</li>
</ul>

<p>The lesson learned with this system is:</p>

<ul>
  <li><strong>Always</strong> start your week with a plan.
When you postponed the planning, I have whiled away my time in 78 days.</li>
  <li>Plan loosely, work hard.
In the first several weeks, I packed too much tasks into a week. It overwhelmingly exceeded my capacity and resulted in anxiety and frustration.</li>
  <li>Leave flexible time with planning.
I find there are always some inevitable sporadic events I need to handle.</li>
  <li>Always motivate yourself.
I recorded 1742 hours in the first 30 weeks and only recorded 433 in the later 22. This happens because when I am at work, I cut the time for inspiration. This huge productivity decline is caused by lack of motivation.</li>
</ul>

<h4 id="physical-training-and-health">Physical Training and Health</h4>
<p>I did a bad job in health and training. From January to June, I would swim twice every week and from March I would do 100 push-ups everyday. However the exercise time was still less than the 30 min everyday. This situation was worse in the second half year.</p>

<p>As a result, I began to suffer from aches at shoulder and low backbone. In the end of the year, the pain could even last the whole day and make sitting an discomfortable position.</p>

<p>Another setback in health is my biological clock. The habit of getting up early still eluded me. I was still quite exciting after midnight and I used to work later than 12:00pm since May. The situation got worse when I went to work where I slept later than 2:00am in average. With the shift in sleeping hours, I also have shifted the time I get up - usually 8 hours after I went to bed.</p>

<p>This shift in sleeping hours dispairs my sleeping quality and I felt a decline in endurance and time of focus when I am working.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson Learned]]></title>
    <link href="http://blog.yangchenyun.com/2011/12/lesson-learned/"/>
    <updated>2011-12-31T21:00:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2011/12/lesson-learned</id>
    <content type="html"><![CDATA[<p>The experience I had in 2011 is invaluable. It extends my perception of work and achievement. Some lessons are learned through trial-and-error and some are learned from costly mistakes.</p>

<ul id="markdown-toc">
  <li><a href="#lesson-1-know-how-to-sustain-yourself">Lesson 1: Know How to Sustain Yourself</a>    <ul>
      <li><a href="#a-frustrating-start">A Frustrating Start</a></li>
      <li><a href="#always-choose-to-take-action">Always Choose to Take Action</a></li>
    </ul>
  </li>
  <li><a href="#lesson-2-dont-avoid-the-boring-work">Lesson 2: Don’t avoid the boring work</a></li>
  <li><a href="#lesson-3-guard-against-distraction">Lesson 3: Guard Against Distraction</a></li>
  <li><a href="#lesson-4-walk-at-your-own-pace">Lesson 4: Walk at Your Own Pace</a></li>
  <li><a href="#lesson-5-identify-the-opportunity">Lesson 5: Identify the “Opportunity”</a></li>
</ul>

<h2 id="lesson-1-know-how-to-sustain-yourself">Lesson 1: Know How to Sustain Yourself</h2>

<h3 id="a-frustrating-start">A Frustrating Start</h3>
<blockquote>
  <p>Nobody, as long as he moves about among the chaotic currents of life, is without trouble. - Carl Jung</p>
</blockquote>

<p>After the first thrilling weeks since I dived into computer science, things turned out to be much more daunting than I thought before. Without preparation I walked into an obscure reign with a ‘map’ full of mystical symbols. Soon I realized that there were more areas I needed to explore, the ‘map’ I had was just an entrance to a much bigger world. In that world, I would encounter stunning web products on a daily basis. The more products I saw, the eager I wanted to be able to create and the more frustration I ended up with - I didn’t even know how to make a single web page.</p>

<p>Besides frustration, self-doubt is another setback. I constantly doubted myself because I had no experience in computer science. Did I choose the right technology to learn? Was I learning too slowly? Did I miss something important? How long would it take to reach the next stage? There was no place to find the answers. To comfort myself I had to choose to ignore them.</p>

<p><img src="http://blog.yangchenyun.com/images/yelling.jpg" alt="My yelling self" class="right" />
  Ignoring didn’t solve the problem. As the excitement and confidence subsided, the accumulating fear and doubt finally dominated. I was worn out. There comes the time when I found myself utterly useless:</p>

<p>A 24-year-old who just start learning web design and development alone without the ability to feed his own living.</p>

<p>What a bum.</p>

<h3 id="always-choose-to-take-action">Always Choose to Take Action</h3>

<p>Time to give up?</p>

<p>I thought about it honestly. However, I reasoned out that if I gave up and started in another field I had to experience the same frustration again. If this <strong>pattern of problem</strong> couldn’t be overcome, I could go nowhere further than where I was. I had to sustain myself and keep on walking.</p>

<blockquote>
  <p>If this <strong>pattern of problem</strong> couldn’t be overcome, I could go nowhere further than where I was.</p>
</blockquote>

<p>Having no choice to fall back on, I needed to <strong>protect my motivation</strong> in order to deal with the fear and doubt. Thus I developed <a href="http://quote.yangchenyun.com" title="My Quotes" target="_blank">Qotto</a> - a collection of quotes I like. I set it as my default browser tab and feed me inspiration when I feel disheartened.</p>

<p>I also decided <strong>always choose to take action</strong> when I feel frustrated. Whenever I feel overwhelmed by self-doubt, I force myself to do something - anything from reading one or two pages of a book to making several lines of code work. The actions I took always provide me with positive feedback. I learned one or two tips to use a language, make a small piece of code work under my will. However small they were, it convinced me that I was moving forward. And moving forward is the one most important action to overcome the frustration.</p>

<h2 id="lesson-2-dont-avoid-the-boring-work">Lesson 2: Don’t avoid the boring work</h2>
<p>After working on some personal projects and later in a start-up company, I learned that getting the boring work done is necessary to deliver great work.</p>

<p>For every creative work, the process to form and express an idea is often thrilling and inspiring, be it in way of writing, drawing, coding etc. It is then followed by a long and boring process to fix things and polish them up. This sort of work seems not as creative as the previous one. However it is <strong>this boring process determines the quality of the creation</strong>.</p>

<p>Take writing as an example, the first several hours of writing are always thrilling. With several rough points of view in mind, it is easy to pull together several ideas into paragraphs quickly. But then there comes the boring part. The right words need to be found and weighed in order to express the ideas with accuracy. The whole structure needs to be balanced - excessive part need be compressed or removed, confusing one will be rewritten, weak arguments need to be strengthened. Then mistakes in spelling and grammar need to be spotted and fixed. For me, the polishing up work will often take almost twice the time of writing itself.</p>

<p>The same rule applies to coding. An elegant solution isn’t found in the from the outset. After thinking about a problem, doing some research and weighing several choices, I would rough out a solution to work with. When this creative part of work is done, I need to sketch the idea out from writing the first piece of code, making it work, adding another part, making them work together and so on so forth. When the whole pieces are working as expected, I will rewrite it towards a modularized structure and improve its performance and legibility.</p>

<blockquote>
  <p>…it is often this boring parts of work separate professionals from amateurs.</p>
</blockquote>

<p>This repetitive and humdrum process is shared in all kinds of work. <strong>It is often this boring work separates professionals from amateurs.</strong> We could only take care of one aspect of creation at one time. When pulling ideas out of our head, we want it to flow smoothly, one after another, and often result in a mess. When an idea is roughed out, refinement process is needed to fix the part that doesn’t work and polish the whole thing up in all aspects. Although boring and daunting, without this refinement, a messed-up products based on even brilliant idea won’t work.</p>

<h2 id="lesson-3-guard-against-distraction">Lesson 3: Guard Against Distraction</h2>
<blockquote>
  <p>It takes time to realize even one idea and there are so many of them. Thus it is important to guard myself against distraction.</p>
</blockquote>

<p>In 2011, I recorded 130 new ideas and took actions on 43 of them. Some were improvement on what I had been doing but some were only sporadic impulses to try something out. The projects driven by these impulses were often canceled or abandoned within one month. This failed attempts cover:</p>

<ul>
  <li>Learning Drovak keyboard layout</li>
  <li>Attend 54 air companies’ frequent miles program to earn travel tickets</li>
  <li>Try to recite <the old="" man="" and="" sea="" /></li>
  <li>To learn the ins and outs of <code>Wordpress</code></li>
  <li>Learning <code>Django</code></li>
  <li>Worked on several projects with friends</li>
</ul>

<p>The time spent on those projects was wasted. This wasted time is the <strong>cost of distraction</strong>. If I was able to turn down all of them but focus my work on one, at least I could make one difference in my current situation.</p>

<p>It takes time to realize even one idea and there are so many of them I <em>could</em> take action on. Thus it is important to guard myself against distraction and only focus on the most important stuff. I need to <strong>detect those distraction</strong> and <strong>prevent myself taking actions</strong>.</p>

<p>To detect distraction, the <strong>minimal viable rule</strong> works well. When I get thrilled by one idea, I will check it against the question ‘is it necessary or better than my current methods to approach my goal?’. If the answer is not an absolutely ‘yes’, it is a distraction.</p>

<p>To prevent taking action, I will ask another question against it - ‘will you be doing it one month later? six month later? one year later?’ It the answer is no, I will drop it because I don’t even have enough determination in the beginning. Without the resolution, I won’t be able to sustain myself through the tough process to pull an idea off.</p>

<h2 id="lesson-4-walk-at-your-own-pace">Lesson 4: Walk at Your Own Pace</h2>
<blockquote>
  <p>Being slow is in fact being fast. It is natural to begin slowly because there are skills to learn, knowledge to acquire and obstacles to overcome.</p>
</blockquote>

<p>In the first few weeks, I always crammed too much stuff into one single week - I wanted to read several chapters of a book, write an article, practice programming and design skills. A goal to accomplish all these tasks was, obviously, unreachable.</p>

<p>After several rushing but frustrating weeks, I gradually discovered my own pace for <strong>each</strong> task. When reading, I need 8 pages/hour to follow a technology book, 12 pages/hour for familiar topics, 2-3 pages/hour to follow a literature book. When writing, I need 8 hours to produce an article. When doing design work, I need 15-20 hours to find the right tone of the whole project and I need 4-5 hours for each individual page/poster design.</p>

<p>Whenever I rush a task I will inevitably miss something. If I rush at technology learning, I wouldn’t have time to exercise. Thus I will end up with only acquaintance with the technology but not practical experience. If I rush a literature book, I would miss the subtle nuance of meaning and end up with a fuzzy story outline. If I rush the coding, I would copy and paste snippets from others without a fully understanding. Thus my skill isn’t improved and the following maintenance work will be a pain.</p>

<p>Being slow is in fact being fast. It is natural to begin slowly because there are skills to learn, knowledge to acquire and obstacles to overcome. Being a beginner in a novel field, I couldn’t predict the situation with accuracy. I need to learn crawling before I could walk and run. Only after required practices at a slow pace, I could get myself accustomed to crawling and it is the time I could get my hands off the ground and start learning walking and then running. Being slow is the necessary process before being fast. Rushing up in the beginning would only trip me up.</p>

<h2 id="lesson-5-identify-the-opportunity">Lesson 5: Identify the “Opportunity”</h2>
<blockquote>
  <p>Opportunity is a very personal thing. Another people’s opportunity isn’t necessarily mine as we might have very difference goals.</p>
</blockquote>

<p>In my second half year, most of my goals are not archived (English learning, design, backend technology and financial goals), productivity drops and unhappiness arrives. After I join in a company, my original direction is diverted to another route. This setback is caused by the fault to mistake “one possible way” for my opportunity.</p>

<p>Opportunity is a very personal thing. Another people’s opportunity isn’t necessarily mine as we might have very difference goals. <strong>Opportunity is like the highway which leads to <em>my</em> destination</strong>. There are lots of entrances to different highways. Driving into the wrong ones won’t get me further.</p>

<p>To choose the right one, it is essential to have one confirmed destination. I made a mistake in August when joining the company because I was not determined to stick to mine. I was convinced that “being a core member of a successful company will be a huge boost for my personal development”. It turned out to be a bad choice as working with the company whose values aren’t congruent with mine is a miserable experience. When I left the team, both sides suffered from some loss.</p>

<p>This is a costly lesson learned. In 2012, I will lay down the most important goals in the annual plan and use them to prevent the same mistake happening again.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speech at TEDxYouth West Lake]]></title>
    <link href="http://blog.yangchenyun.com/2011/08/tedxyouth-wesklake-speech/"/>
    <updated>2011-08-21T00:00:00+08:00</updated>
    <id>http://blog.yangchenyun.com/2011/08/tedxyouth-wesklake-speech</id>
    <content type="html"><![CDATA[<h2 id="what-holds-us-back-from-changes">What Holds Us Back from Changes</h2>

<p><img src="http://blog.yangchenyun.com/images/tedxwl_logo.png" alt="TEDxWestlake Logo" class="right" />
This is the a talk I delivered at <a href="http://www.ted.com/tedx/events/3030" title="TEDxYouth Details">TEDxYouth Wesk Lake</a> on August 21th 2011.</p>

<p>I talked about lessons learned from my experience to change career path from an background of Economics to web designer and developer in 301 days.</p>

<embed class="" src="http://www.tudou.com/v/juhnvWn997s/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="360" />

<div style="width:480px; margin:0 auto;" id="__ss_10760600"><object id="__sse10760600" width="480" height="404"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=whatholdsusbackfromchanges-120102035627-phpapp01&amp;stripped_title=what-holds-us-back-from-changes&amp;userName=yangchenyun" /><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="wmode" value="transparent" /><embed name="__sse10760600" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=whatholdsusbackfromchanges-120102035627-phpapp01&amp;stripped_title=what-holds-us-back-from-changes&amp;userName=yangchenyun" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="transparent" width="480" height="404" /></object></div>

<p>The related files could be found <a href="http://ge.tt/97rT6pB" title="Presentation Files of my TEDxYouth Talk">here</a>.</p>

<p>Thanks for all the lovely organizers to pull this event off.</p>

]]></content>
  </entry>
  
</feed>
